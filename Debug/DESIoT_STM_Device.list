
DESIoT_STM_Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003920  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c74  08003c74  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c7c  08003c7c  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c7c  08003c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  08003c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020270  2**0
                  CONTENTS
 10 .bss          0000008c  20000270  20000270  00020270  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  00020270  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008fa6  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018a3  00000000  00000000  00029246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  0002aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006a0  00000000  00000000  0002b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020994  00000000  00000000  0002b8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009241  00000000  00000000  0004c25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3326  00000000  00000000  0005549d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001187c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000231c  00000000  00000000  00118814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a98 	.word	0x08003a98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08003a98 	.word	0x08003a98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DESIoT_loop>:

#include "DESIoT_device.h"

DESIoT_Frame_Hander_t hFrame;

void DESIoT_loop() {
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <DESIOT_Rx1byte>:

void DESIOT_Rx1byte(uint8_t rxByte)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	4603      	mov	r3, r0
 800059a:	71fb      	strb	r3, [r7, #7]

}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <DESIoT_assignInt>:

/**
 * Send a data packet requiring to assign an integer to the gateway.
 */
void DESIoT_assignInt(uint8_t VS, size_t integer)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	4602      	mov	r2, r0
 80005b2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80005b6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80005ba:	6019      	str	r1, [r3, #0]
 80005bc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80005c0:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 80005c4:	701a      	strb	r2, [r3, #0]
	DESIoT_dataPacket_t dataPacket;
	dataPacket.cmd = DESIOT_CMD_ASSIGN_VIRTUAL_STORAGE;
 80005c6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80005ca:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	dataPacket.dataLen = DESIOT_DEVICE_ID_SIZE + sizeof(VS) + sizeof(integer); // add 12-byte device ID
 80005d2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80005d6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80005da:	2200      	movs	r2, #0
 80005dc:	f042 0211 	orr.w	r2, r2, #17
 80005e0:	705a      	strb	r2, [r3, #1]
 80005e2:	789a      	ldrb	r2, [r3, #2]
 80005e4:	f022 0203 	bic.w	r2, r2, #3
 80005e8:	709a      	strb	r2, [r3, #2]

	// ignore 12-byte data for device ID
	dataPacket.data[DESIOT_DEVICE_ID_SIZE] = VS;
 80005ea:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80005ee:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80005f2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80005f6:	f2a2 4209 	subw	r2, r2, #1033	; 0x409
 80005fa:	7812      	ldrb	r2, [r2, #0]
 80005fc:	73da      	strb	r2, [r3, #15]
	memcpy(dataPacket.data + DESIOT_DEVICE_ID_SIZE + 1, &integer, sizeof(integer));
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	3303      	adds	r3, #3
 8000604:	330d      	adds	r3, #13
 8000606:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800060a:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	601a      	str	r2, [r3, #0]

	DESIoT_sendDataPacket(DESIOT_CMD_LEN + DESIOT_DATALEN_LEN + dataPacket.dataLen,
 8000612:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000616:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f3c3 2309 	ubfx	r3, r3, #8, #10
 8000620:	b29b      	uxth	r3, r3
 8000622:	3303      	adds	r3, #3
 8000624:	f107 020c 	add.w	r2, r7, #12
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f806 	bl	800063c <DESIoT_sendDataPacket>
			(uint8_t*)&dataPacket);
}
 8000630:	bf00      	nop
 8000632:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <DESIoT_sendDataPacket>:

/**
 *
 */
void DESIoT_sendDataPacket(const size_t dataLen, uint8_t *data)
{
 800063c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000640:	b087      	sub	sp, #28
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	6039      	str	r1, [r7, #0]
 8000648:	466b      	mov	r3, sp
 800064a:	461e      	mov	r6, r3
	uint8_t frame[DESIOT_HEADERS_LEN + dataLen + DESIOT_CRC_LEN];
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3305      	adds	r3, #5
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3306      	adds	r3, #6
 8000656:	2200      	movs	r2, #0
 8000658:	4698      	mov	r8, r3
 800065a:	4691      	mov	r9, r2
 800065c:	f04f 0200 	mov.w	r2, #0
 8000660:	f04f 0300 	mov.w	r3, #0
 8000664:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000668:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800066c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3306      	adds	r3, #6
 8000674:	2200      	movs	r2, #0
 8000676:	461c      	mov	r4, r3
 8000678:	4615      	mov	r5, r2
 800067a:	f04f 0200 	mov.w	r2, #0
 800067e:	f04f 0300 	mov.w	r3, #0
 8000682:	00eb      	lsls	r3, r5, #3
 8000684:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000688:	00e2      	lsls	r2, r4, #3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3306      	adds	r3, #6
 800068e:	3307      	adds	r3, #7
 8000690:	08db      	lsrs	r3, r3, #3
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	ebad 0d03 	sub.w	sp, sp, r3
 8000698:	466b      	mov	r3, sp
 800069a:	3300      	adds	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
	memset(frame, 0, sizeof(frame));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3306      	adds	r3, #6
 80006a2:	461a      	mov	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	6938      	ldr	r0, [r7, #16]
 80006a8:	f002 fbfc 	bl	8002ea4 <memset>

	DESIoT_headFrame_t *headFrame = (DESIoT_headFrame_t*)frame;
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	60fb      	str	r3, [r7, #12]
	DESIoT_trailFrame_t *trailFrame = (DESIoT_trailFrame_t*)(frame + sizeof(frame) - (DESIOT_TRAIL_LEN + DESIOT_CRC_LEN));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3302      	adds	r3, #2
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	4413      	add	r3, r2
 80006b8:	60bb      	str	r3, [r7, #8]

	headFrame->h1 = DESIOT_H1_DEFAULT;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2207      	movs	r2, #7
 80006be:	701a      	strb	r2, [r3, #0]
	headFrame->h2 = DESIOT_H2_DEFAULT;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2217      	movs	r2, #23
 80006c4:	705a      	strb	r2, [r3, #1]
	trailFrame->t1 = DESIOT_T1_DEFAULT;
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	2207      	movs	r2, #7
 80006ca:	701a      	strb	r2, [r3, #0]
	trailFrame->t2 = DESIOT_T2_DEFAULT;
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	2217      	movs	r2, #23
 80006d0:	705a      	strb	r2, [r3, #1]

	// set data packet to frame
	memcpy(frame + DESIOT_HEAD_LEN, data, dataLen);
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	3302      	adds	r3, #2
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	6839      	ldr	r1, [r7, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fbd4 	bl	8002e88 <memcpy>
	// set device ID
	memcpy(frame + DESIOT_HEAD_LEN + DESIOT_CMD_LEN + DESIOT_DATALEN_LEN, hFrame.device_id, DESIOT_DEVICE_ID_SIZE);
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	3305      	adds	r3, #5
 80006e4:	4a0d      	ldr	r2, [pc, #52]	; (800071c <DESIoT_sendDataPacket+0xe0>)
 80006e6:	461c      	mov	r4, r3
 80006e8:	4613      	mov	r3, r2
 80006ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80006ec:	6020      	str	r0, [r4, #0]
 80006ee:	6061      	str	r1, [r4, #4]
 80006f0:	60a2      	str	r2, [r4, #8]

	trailFrame->crc = DESIoT_Compute_CRC16(data, dataLen);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4619      	mov	r1, r3
 80006f6:	6838      	ldr	r0, [r7, #0]
 80006f8:	f000 f812 	bl	8000720 <DESIoT_Compute_CRC16>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	805a      	strh	r2, [r3, #2]
	DESIOT_SENDBYTES_F_NAME(sizeof(frame), frame);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3306      	adds	r3, #6
 8000708:	6939      	ldr	r1, [r7, #16]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f9a4 	bl	8000a58 <DESIoT_sendBytes>
 8000710:	46b5      	mov	sp, r6
}
 8000712:	bf00      	nop
 8000714:	371c      	adds	r7, #28
 8000716:	46bd      	mov	sp, r7
 8000718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800071c:	2000028c 	.word	0x2000028c

08000720 <DESIoT_Compute_CRC16>:
		crctable16[divident] = curByte;
	}
}

uint16_t DESIoT_Compute_CRC16(uint8_t *bytes, const int32_t BYTES_LEN)
{
 8000720:	b480      	push	{r7}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	82fb      	strh	r3, [r7, #22]

	for (int32_t i = 0; i < BYTES_LEN; i++)
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	e019      	b.n	8000768 <DESIoT_Compute_CRC16+0x48>
	{
		uint8_t b = bytes[i];
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	73fb      	strb	r3, [r7, #15]

		/* XOR-in next input byte into MSB of crc, that's our new intermediate divident */
		uint8_t pos = (uint8_t)((crc >> 8) ^ b);
 800073e:	8afb      	ldrh	r3, [r7, #22]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	b29b      	uxth	r3, r3
 8000744:	b2da      	uxtb	r2, r3
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	4053      	eors	r3, r2
 800074a:	73bb      	strb	r3, [r7, #14]
		/* Shift out the MSB used for division per lookuptable and XOR with the remainder */
		crc = (uint16_t)((crc << 8) ^ (uint16_t)(crctable16[pos]));
 800074c:	8afb      	ldrh	r3, [r7, #22]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b21a      	sxth	r2, r3
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	490a      	ldr	r1, [pc, #40]	; (8000780 <DESIoT_Compute_CRC16+0x60>)
 8000756:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800075a:	b21b      	sxth	r3, r3
 800075c:	4053      	eors	r3, r2
 800075e:	b21b      	sxth	r3, r3
 8000760:	82fb      	strh	r3, [r7, #22]
	for (int32_t i = 0; i < BYTES_LEN; i++)
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	3301      	adds	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	dbe1      	blt.n	8000734 <DESIoT_Compute_CRC16+0x14>
	}
	//	printf("\nHERE 3");

	return crc;
 8000770:	8afb      	ldrh	r3, [r7, #22]
}
 8000772:	4618      	mov	r0, r3
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <DESIoT_hexToU8Array>:

void DESIoT_hexToU8Array(const char *hexStr, uint8_t *buf, size_t bufSize)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	const char *pos = hexStr;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	61fb      	str	r3, [r7, #28]
	/* WARNING: no sanitization or error-checking whatsoever */
	for (size_t i = 0; i < bufSize / sizeof(*buf); i++)
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	e00e      	b.n	80007b8 <DESIoT_hexToU8Array+0x34>
	{
		int n = sscanf(pos, "%2x", &buf[i]);
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	4413      	add	r3, r2
 80007a0:	461a      	mov	r2, r3
 80007a2:	490a      	ldr	r1, [pc, #40]	; (80007cc <DESIoT_hexToU8Array+0x48>)
 80007a4:	69f8      	ldr	r0, [r7, #28]
 80007a6:	f002 fb85 	bl	8002eb4 <siscanf>
 80007aa:	6178      	str	r0, [r7, #20]
		pos += 2;
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	3302      	adds	r3, #2
 80007b0:	61fb      	str	r3, [r7, #28]
	for (size_t i = 0; i < bufSize / sizeof(*buf); i++)
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	3301      	adds	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d3ec      	bcc.n	800079a <DESIoT_hexToU8Array+0x16>
	}
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	08003ab0 	.word	0x08003ab0

080007d0 <DESIoT_begin>:
uint16_t DESIoT_Compute_CRC16(uint8_t *bytes, const int32_t BYTES_LEN);
// String to HEX
void DESIoT_hexToU8Array(const char *hexStr, uint8_t *buf, size_t bufSize);

// static funcs
static void DESIoT_begin() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
#if defined(DESIOT_DEVICE_ID)
	DESIoT_hexToU8Array(DESIOT_DEVICE_ID, hFrame.device_id, sizeof(hFrame.device_id));
 80007d4:	220c      	movs	r2, #12
 80007d6:	4903      	ldr	r1, [pc, #12]	; (80007e4 <DESIoT_begin+0x14>)
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <DESIoT_begin+0x18>)
 80007da:	f7ff ffd3 	bl	8000784 <DESIoT_hexToU8Array>
#endif
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000028c 	.word	0x2000028c
 80007e8:	08003ab4 	.word	0x08003ab4

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f0:	f000 fa6a 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f4:	f000 f830 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f000 f8b6 	bl	8000968 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80007fc:	f000 f88a 	bl	8000914 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	DESIoT_begin();
 8000800:	f7ff ffe6 	bl	80007d0 <DESIoT_begin>
	HAL_UART_Receive_IT(&huart6, &ITReceive, 1);
 8000804:	2201      	movs	r2, #1
 8000806:	4910      	ldr	r1, [pc, #64]	; (8000848 <main+0x5c>)
 8000808:	4810      	ldr	r0, [pc, #64]	; (800084c <main+0x60>)
 800080a:	f001 fb7a 	bl	8001f02 <HAL_UART_Receive_IT>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		DESIoT_loop();
 800080e:	f7ff feb9 	bl	8000584 <DESIoT_loop>
		if(HAL_GetTick() - lastTick > 5000)
 8000812:	f000 fabf 	bl	8000d94 <HAL_GetTick>
 8000816:	4602      	mov	r2, r0
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <main+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000822:	4293      	cmp	r3, r2
 8000824:	d9f3      	bls.n	800080e <main+0x22>
		{
			DESIoT_assignInt(DESIOT_VS0, lastTick);
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <main+0x64>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4619      	mov	r1, r3
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff febb 	bl	80005a8 <DESIoT_assignInt>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <main+0x68>)
 8000838:	f000 fe11 	bl	800145e <HAL_GPIO_TogglePin>
			lastTick = HAL_GetTick();
 800083c:	f000 faaa 	bl	8000d94 <HAL_GetTick>
 8000840:	4603      	mov	r3, r0
 8000842:	4a03      	ldr	r2, [pc, #12]	; (8000850 <main+0x64>)
 8000844:	6013      	str	r3, [r2, #0]
		DESIoT_loop();
 8000846:	e7e2      	b.n	800080e <main+0x22>
 8000848:	200002dc 	.word	0x200002dc
 800084c:	20000298 	.word	0x20000298
 8000850:	200002e0 	.word	0x200002e0
 8000854:	40021000 	.word	0x40021000

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fb1c 	bl	8002ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <SystemClock_Config+0xb4>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a21      	ldr	r2, [pc, #132]	; (800090c <SystemClock_Config+0xb4>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <SystemClock_Config+0xb4>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <SystemClock_Config+0xb8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <SystemClock_Config+0xb8>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <SystemClock_Config+0xb8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 fde3 	bl	8001494 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008d4:	f000 f8d4 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	230f      	movs	r3, #15
 80008da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f846 	bl	8001984 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008fe:	f000 f8bf 	bl	8000a80 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3750      	adds	r7, #80	; 0x50
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART6_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_USART6_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_USART6_UART_Init+0x4c>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART6_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART6_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART6_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART6_UART_Init+0x4c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART6_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART6_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART6_UART_Init+0x4c>)
 800094c:	f001 f9fa 	bl	8001d44 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000956:	f000 f893 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000298 	.word	0x20000298
 8000964:	40011400 	.word	0x40011400

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <MX_GPIO_Init+0xb8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a26      	ldr	r2, [pc, #152]	; (8000a20 <MX_GPIO_Init+0xb8>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_GPIO_Init+0xb8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_GPIO_Init+0xb8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <MX_GPIO_Init+0xb8>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_GPIO_Init+0xb8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_GPIO_Init+0xb8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <MX_GPIO_Init+0xb8>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_GPIO_Init+0xb8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_GPIO_Init+0xb8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <MX_GPIO_Init+0xb8>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_GPIO_Init+0xb8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <MX_GPIO_Init+0xbc>)
 80009f6:	f000 fd19 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_GPIO_Init+0xbc>)
 8000a14:	f000 fb6e 	bl	80010f4 <HAL_GPIO_Init>

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = huart->Instance->DR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	73fb      	strb	r3, [r7, #15]
	DESIOT_Rx1byte(rxByte);
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fda9 	bl	8000592 <DESIOT_Rx1byte>
	HAL_UART_Receive_IT(huart, &ITReceive, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	4904      	ldr	r1, [pc, #16]	; (8000a54 <HAL_UART_RxCpltCallback+0x2c>)
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f001 fa5c 	bl	8001f02 <HAL_UART_Receive_IT>
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200002dc 	.word	0x200002dc

08000a58 <DESIoT_sendBytes>:

DESIOT_SENDBYTES
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart6, bytes, size, 1000);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	6839      	ldr	r1, [r7, #0]
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <DESIoT_sendBytes+0x24>)
 8000a6e:	f001 f9b6 	bl	8001dde <HAL_UART_Transmit>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000298 	.word	0x20000298

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <HAL_UART_MspInit+0x94>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d133      	bne.n	8000b66 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b08:	f043 0320 	orr.w	r3, r3, #32
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f003 0320 	and.w	r3, r3, #32
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b36:	23c0      	movs	r3, #192	; 0xc0
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b46:	2308      	movs	r3, #8
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_UART_MspInit+0x9c>)
 8000b52:	f000 facf 	bl	80010f4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2047      	movs	r0, #71	; 0x47
 8000b5c:	f000 fa01 	bl	8000f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000b60:	2047      	movs	r0, #71	; 0x47
 8000b62:	f000 fa1a 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40011400 	.word	0x40011400
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020800 	.word	0x40020800

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 f8d0 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <USART6_IRQHandler+0x10>)
 8000bd6:	f001 f9c5 	bl	8001f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000298 	.word	0x20000298

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f002 f90e 	bl	8002e34 <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20020000 	.word	0x20020000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	200002e4 	.word	0x200002e4
 8000c4c:	20000300 	.word	0x20000300

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c9e:	f7ff ffd7 	bl	8000c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f002 f8cd 	bl	8002e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fda1 	bl	80007ec <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8000cb8:	08003c84 	.word	0x08003c84
  ldr r2, =_sbss
 8000cbc:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8000cc0:	200002fc 	.word	0x200002fc

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <HAL_Init+0x40>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_Init+0x40>)
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_Init+0x40>)
 8000cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f92b 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fec6 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f943 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f000 f90b 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000200 	.word	0x20000200
 8000d64:	20000208 	.word	0x20000208
 8000d68:	20000204 	.word	0x20000204

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000208 	.word	0x20000208
 8000d90:	200002e8 	.word	0x200002e8

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	200002e8 	.word	0x200002e8

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff29 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff3e 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff8e 	bl	8000ea0 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff31 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffa2 	bl	8000f08 <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff feda 	bl	8000d94 <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d008      	beq.n	8001000 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e052      	b.n	80010a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0216 	bic.w	r2, r2, #22
 800100e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	695a      	ldr	r2, [r3, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800101e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	2b00      	cmp	r3, #0
 8001026:	d103      	bne.n	8001030 <HAL_DMA_Abort+0x62>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102c:	2b00      	cmp	r3, #0
 800102e:	d007      	beq.n	8001040 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0208 	bic.w	r2, r2, #8
 800103e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001050:	e013      	b.n	800107a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001052:	f7ff fe9f 	bl	8000d94 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b05      	cmp	r3, #5
 800105e:	d90c      	bls.n	800107a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2220      	movs	r2, #32
 8001064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2203      	movs	r2, #3
 800106a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e015      	b.n	80010a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1e4      	bne.n	8001052 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108c:	223f      	movs	r2, #63	; 0x3f
 800108e:	409a      	lsls	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d004      	beq.n	80010cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e00c      	b.n	80010e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2205      	movs	r2, #5
 80010d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e16b      	b.n	80013e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 815a 	bne.w	80013e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d005      	beq.n	8001146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	2b02      	cmp	r3, #2
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80b4 	beq.w	80013e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b60      	ldr	r3, [pc, #384]	; (8001400 <HAL_GPIO_Init+0x30c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a5f      	ldr	r2, [pc, #380]	; (8001400 <HAL_GPIO_Init+0x30c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <HAL_GPIO_Init+0x30c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001296:	4a5b      	ldr	r2, [pc, #364]	; (8001404 <HAL_GPIO_Init+0x310>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_GPIO_Init+0x314>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d02b      	beq.n	800131a <HAL_GPIO_Init+0x226>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a51      	ldr	r2, [pc, #324]	; (800140c <HAL_GPIO_Init+0x318>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d025      	beq.n	8001316 <HAL_GPIO_Init+0x222>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a50      	ldr	r2, [pc, #320]	; (8001410 <HAL_GPIO_Init+0x31c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01f      	beq.n	8001312 <HAL_GPIO_Init+0x21e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <HAL_GPIO_Init+0x320>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x21a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <HAL_GPIO_Init+0x324>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x216>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4d      	ldr	r2, [pc, #308]	; (800141c <HAL_GPIO_Init+0x328>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x212>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4c      	ldr	r2, [pc, #304]	; (8001420 <HAL_GPIO_Init+0x32c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x20e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4b      	ldr	r2, [pc, #300]	; (8001424 <HAL_GPIO_Init+0x330>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x20a>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e00e      	b.n	800131c <HAL_GPIO_Init+0x228>
 80012fe:	2308      	movs	r3, #8
 8001300:	e00c      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001302:	2306      	movs	r3, #6
 8001304:	e00a      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001306:	2305      	movs	r3, #5
 8001308:	e008      	b.n	800131c <HAL_GPIO_Init+0x228>
 800130a:	2304      	movs	r3, #4
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x228>
 800130e:	2303      	movs	r3, #3
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x228>
 800131a:	2300      	movs	r3, #0
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	f002 0203 	and.w	r2, r2, #3
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4093      	lsls	r3, r2
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800132c:	4935      	ldr	r1, [pc, #212]	; (8001404 <HAL_GPIO_Init+0x310>)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <HAL_GPIO_Init+0x334>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800135e:	4a32      	ldr	r2, [pc, #200]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_GPIO_Init+0x334>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b2:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	f67f ae90 	bls.w	8001110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40013800 	.word	0x40013800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020400 	.word	0x40020400
 8001410:	40020800 	.word	0x40020800
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40021000 	.word	0x40021000
 800141c:	40021400 	.word	0x40021400
 8001420:	40021800 	.word	0x40021800
 8001424:	40021c00 	.word	0x40021c00
 8001428:	40013c00 	.word	0x40013c00

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	619a      	str	r2, [r3, #24]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001470:	887a      	ldrh	r2, [r7, #2]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4013      	ands	r3, r2
 8001476:	041a      	lsls	r2, r3, #16
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43d9      	mvns	r1, r3
 800147c:	887b      	ldrh	r3, [r7, #2]
 800147e:	400b      	ands	r3, r1
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e267      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d075      	beq.n	800159e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014b2:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d00c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014be:	4b85      	ldr	r3, [pc, #532]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d112      	bne.n	80014f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ca:	4b82      	ldr	r3, [pc, #520]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014d6:	d10b      	bne.n	80014f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	4b7e      	ldr	r3, [pc, #504]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d05b      	beq.n	800159c <HAL_RCC_OscConfig+0x108>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d157      	bne.n	800159c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e242      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f8:	d106      	bne.n	8001508 <HAL_RCC_OscConfig+0x74>
 80014fa:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a75      	ldr	r2, [pc, #468]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e01d      	b.n	8001544 <HAL_RCC_OscConfig+0xb0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x98>
 8001512:	4b70      	ldr	r3, [pc, #448]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6f      	ldr	r2, [pc, #444]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6c      	ldr	r2, [pc, #432]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0xb0>
 800152c:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a68      	ldr	r2, [pc, #416]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b66      	ldr	r3, [pc, #408]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a65      	ldr	r2, [pc, #404]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fc22 	bl	8000d94 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fc1e 	bl	8000d94 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e207      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0xc0>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fc0e 	bl	8000d94 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fc0a 	bl	8000d94 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1f3      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0xe8>
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d063      	beq.n	8001672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015aa:	4b4a      	ldr	r3, [pc, #296]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00b      	beq.n	80015ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b6:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d11c      	bne.n	80015fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c2:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d116      	bne.n	80015fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_RCC_OscConfig+0x152>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e1c7      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4937      	ldr	r1, [pc, #220]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	e03a      	b.n	8001672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001604:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <HAL_RCC_OscConfig+0x244>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fbc3 	bl	8000d94 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fbbf 	bl	8000d94 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1a8      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4925      	ldr	r1, [pc, #148]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_RCC_OscConfig+0x244>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fba2 	bl	8000d94 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fb9e 	bl	8000d94 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e187      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d036      	beq.n	80016ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d016      	beq.n	80016b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_RCC_OscConfig+0x248>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fb82 	bl	8000d94 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fb7e 	bl	8000d94 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e167      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_OscConfig+0x240>)
 80016a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x200>
 80016b2:	e01b      	b.n	80016ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_OscConfig+0x248>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb6b 	bl	8000d94 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	e00e      	b.n	80016e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff fb67 	bl	8000d94 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d907      	bls.n	80016e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e150      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
 80016d4:	40023800 	.word	0x40023800
 80016d8:	42470000 	.word	0x42470000
 80016dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	4b88      	ldr	r3, [pc, #544]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ea      	bne.n	80016c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8097 	beq.w	8001828 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b81      	ldr	r3, [pc, #516]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10f      	bne.n	800172a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b7d      	ldr	r3, [pc, #500]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a7c      	ldr	r2, [pc, #496]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b7a      	ldr	r3, [pc, #488]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172a:	4b77      	ldr	r3, [pc, #476]	; (8001908 <HAL_RCC_OscConfig+0x474>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d118      	bne.n	8001768 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001736:	4b74      	ldr	r3, [pc, #464]	; (8001908 <HAL_RCC_OscConfig+0x474>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a73      	ldr	r2, [pc, #460]	; (8001908 <HAL_RCC_OscConfig+0x474>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001742:	f7ff fb27 	bl	8000d94 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174a:	f7ff fb23 	bl	8000d94 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e10c      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	4b6a      	ldr	r3, [pc, #424]	; (8001908 <HAL_RCC_OscConfig+0x474>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x2ea>
 8001770:	4b64      	ldr	r3, [pc, #400]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	4a63      	ldr	r2, [pc, #396]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6713      	str	r3, [r2, #112]	; 0x70
 800177c:	e01c      	b.n	80017b8 <HAL_RCC_OscConfig+0x324>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b05      	cmp	r3, #5
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x30c>
 8001786:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	4a5e      	ldr	r2, [pc, #376]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6713      	str	r3, [r2, #112]	; 0x70
 8001792:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	4a5b      	ldr	r2, [pc, #364]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6713      	str	r3, [r2, #112]	; 0x70
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0x324>
 80017a0:	4b58      	ldr	r3, [pc, #352]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	4a57      	ldr	r2, [pc, #348]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	6713      	str	r3, [r2, #112]	; 0x70
 80017ac:	4b55      	ldr	r3, [pc, #340]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	4a54      	ldr	r2, [pc, #336]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f023 0304 	bic.w	r3, r3, #4
 80017b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d015      	beq.n	80017ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff fae8 	bl	8000d94 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c6:	e00a      	b.n	80017de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c8:	f7ff fae4 	bl	8000d94 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e0cb      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017de:	4b49      	ldr	r3, [pc, #292]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80017e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0ee      	beq.n	80017c8 <HAL_RCC_OscConfig+0x334>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ec:	f7ff fad2 	bl	8000d94 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff face 	bl	8000d94 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e0b5      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180a:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ee      	bne.n	80017f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800181c:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	4a38      	ldr	r2, [pc, #224]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001826:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a1 	beq.w	8001974 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d05c      	beq.n	80018f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d141      	bne.n	80018ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <HAL_RCC_OscConfig+0x478>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff faa2 	bl	8000d94 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff fa9e 	bl	8000d94 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e087      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	4b27      	ldr	r3, [pc, #156]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	3b01      	subs	r3, #1
 800188c:	041b      	lsls	r3, r3, #16
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	491b      	ldr	r1, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x478>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fa77 	bl	8000d94 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff fa73 	bl	8000d94 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e05c      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x416>
 80018c8:	e054      	b.n	8001974 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_RCC_OscConfig+0x478>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fa60 	bl	8000d94 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff fa5c 	bl	8000d94 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e045      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_RCC_OscConfig+0x470>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x444>
 80018f6:	e03d      	b.n	8001974 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e038      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
 8001904:	40023800 	.word	0x40023800
 8001908:	40007000 	.word	0x40007000
 800190c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x4ec>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d028      	beq.n	8001970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d121      	bne.n	8001970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d11a      	bne.n	8001970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001946:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001948:	4293      	cmp	r3, r2
 800194a:	d111      	bne.n	8001970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	3b01      	subs	r3, #1
 800195a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d107      	bne.n	8001970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0cc      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d90c      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0b8      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d020      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4a58      	ldr	r2, [pc, #352]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f0:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4a52      	ldr	r2, [pc, #328]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fc:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	494d      	ldr	r1, [pc, #308]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d044      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d119      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e07f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d003      	beq.n	8001a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a52:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e067      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f023 0203 	bic.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4934      	ldr	r1, [pc, #208]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a74:	f7ff f98e 	bl	8000d94 <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7c:	f7ff f98a 	bl	8000d94 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e04f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 020c 	and.w	r2, r3, #12
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1eb      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d20c      	bcs.n	8001acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e032      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4916      	ldr	r1, [pc, #88]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	490e      	ldr	r1, [pc, #56]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b0a:	f000 f821 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	490a      	ldr	r1, [pc, #40]	; (8001b44 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	5ccb      	ldrb	r3, [r1, r3]
 8001b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x1c8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f8ee 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023c00 	.word	0x40023c00
 8001b40:	40023800 	.word	0x40023800
 8001b44:	08003adc 	.word	0x08003adc
 8001b48:	20000200 	.word	0x20000200
 8001b4c:	20000204 	.word	0x20000204

08001b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b54:	b090      	sub	sp, #64	; 0x40
 8001b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b60:	2300      	movs	r3, #0
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d00d      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x40>
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	f200 80a1 	bhi.w	8001cbc <HAL_RCC_GetSysClockFreq+0x16c>
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x34>
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d003      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b82:	e09b      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b88:	e09b      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b8a:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b8e:	e098      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b90:	4b4f      	ldr	r3, [pc, #316]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b9a:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d028      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba6:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	099b      	lsrs	r3, r3, #6
 8001bac:	2200      	movs	r2, #0
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	627a      	str	r2, [r7, #36]	; 0x24
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bbc:	fb03 f201 	mul.w	r2, r3, r1
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	fb00 f303 	mul.w	r3, r0, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a43      	ldr	r2, [pc, #268]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bca:	fba0 1202 	umull	r1, r2, r0, r2
 8001bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bd0:	460a      	mov	r2, r1
 8001bd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd6:	4413      	add	r3, r2
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	61fa      	str	r2, [r7, #28]
 8001be2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bea:	f7fe fb49 	bl	8000280 <__aeabi_uldivmod>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf6:	e053      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf8:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	099b      	lsrs	r3, r3, #6
 8001bfe:	2200      	movs	r2, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	617a      	str	r2, [r7, #20]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c0a:	f04f 0b00 	mov.w	fp, #0
 8001c0e:	4652      	mov	r2, sl
 8001c10:	465b      	mov	r3, fp
 8001c12:	f04f 0000 	mov.w	r0, #0
 8001c16:	f04f 0100 	mov.w	r1, #0
 8001c1a:	0159      	lsls	r1, r3, #5
 8001c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c20:	0150      	lsls	r0, r2, #5
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	ebb2 080a 	subs.w	r8, r2, sl
 8001c2a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c42:	ebb2 0408 	subs.w	r4, r2, r8
 8001c46:	eb63 0509 	sbc.w	r5, r3, r9
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	00eb      	lsls	r3, r5, #3
 8001c54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c58:	00e2      	lsls	r2, r4, #3
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	eb14 030a 	adds.w	r3, r4, sl
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	eb45 030b 	adc.w	r3, r5, fp
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c76:	4629      	mov	r1, r5
 8001c78:	028b      	lsls	r3, r1, #10
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c80:	4621      	mov	r1, r4
 8001c82:	028a      	lsls	r2, r1, #10
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	60fa      	str	r2, [r7, #12]
 8001c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c94:	f7fe faf4 	bl	8000280 <__aeabi_uldivmod>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	0c1b      	lsrs	r3, r3, #16
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	3301      	adds	r3, #1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cba:	e002      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3740      	adds	r7, #64	; 0x40
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	00f42400 	.word	0x00f42400
 8001cd8:	017d7840 	.word	0x017d7840

08001cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000200 	.word	0x20000200

08001cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cf8:	f7ff fff0 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	0a9b      	lsrs	r3, r3, #10
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4903      	ldr	r1, [pc, #12]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	08003aec 	.word	0x08003aec

08001d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d20:	f7ff ffdc 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0b5b      	lsrs	r3, r3, #13
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	08003aec 	.word	0x08003aec

08001d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e03f      	b.n	8001dd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe feb6 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fddf 	bl	800294c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b08a      	sub	sp, #40	; 0x28
 8001de2:	af02      	add	r7, sp, #8
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4613      	mov	r3, r2
 8001dec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d17c      	bne.n	8001ef8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_UART_Transmit+0x2c>
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e075      	b.n	8001efa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_UART_Transmit+0x3e>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e06e      	b.n	8001efa <HAL_UART_Transmit+0x11c>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2221      	movs	r2, #33	; 0x21
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e32:	f7fe ffaf 	bl	8000d94 <HAL_GetTick>
 8001e36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	88fa      	ldrh	r2, [r7, #6]
 8001e3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4c:	d108      	bne.n	8001e60 <HAL_UART_Transmit+0x82>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	e003      	b.n	8001e68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e70:	e02a      	b.n	8001ec8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 fb1f 	bl	80024c0 <UART_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e036      	b.n	8001efa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10b      	bne.n	8001eaa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ea0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	e007      	b.n	8001eba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1cf      	bne.n	8001e72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2140      	movs	r1, #64	; 0x40
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 faef 	bl	80024c0 <UART_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e006      	b.n	8001efa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e000      	b.n	8001efa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ef8:	2302      	movs	r3, #2
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d11d      	bne.n	8001f58 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_UART_Receive_IT+0x26>
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e016      	b.n	8001f5a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_UART_Receive_IT+0x38>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e00f      	b.n	8001f5a <HAL_UART_Receive_IT+0x58>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fb24 	bl	800259c <UART_Start_Receive_IT>
 8001f54:	4603      	mov	r3, r0
 8001f56:	e000      	b.n	8001f5a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001f58:	2302      	movs	r3, #2
  }
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0ba      	sub	sp, #232	; 0xe8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_UART_IRQHandler+0x66>
 8001fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fc07 	bl	80027d6 <UART_Receive_IT>
      return;
 8001fc8:	e256      	b.n	8002478 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80de 	beq.w	8002190 <HAL_UART_IRQHandler+0x22c>
 8001fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fe4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80d1 	beq.w	8002190 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_UART_IRQHandler+0xae>
 8001ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f043 0201 	orr.w	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_UART_IRQHandler+0xd2>
 800201e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f043 0202 	orr.w	r2, r3, #2
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_UART_IRQHandler+0xf6>
 8002042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f043 0204 	orr.w	r2, r3, #4
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800205a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d011      	beq.n	800208a <HAL_UART_IRQHandler+0x126>
 8002066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f043 0208 	orr.w	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 81ed 	beq.w	800246e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_UART_IRQHandler+0x14e>
 80020a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fb92 	bl	80027d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020bc:	2b40      	cmp	r3, #64	; 0x40
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <HAL_UART_IRQHandler+0x17a>
 80020d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d04f      	beq.n	800217e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fa9a 	bl	8002618 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	2b40      	cmp	r3, #64	; 0x40
 80020f0:	d141      	bne.n	8002176 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3314      	adds	r3, #20
 80020f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002100:	e853 3f00 	ldrex	r3, [r3]
 8002104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800210c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3314      	adds	r3, #20
 800211a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800211e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800212a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800212e:	e841 2300 	strex	r3, r2, [r1]
 8002132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1d9      	bne.n	80020f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	2b00      	cmp	r3, #0
 8002144:	d013      	beq.n	800216e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214a:	4a7d      	ldr	r2, [pc, #500]	; (8002340 <HAL_UART_IRQHandler+0x3dc>)
 800214c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe ffab 	bl	80010ae <HAL_DMA_Abort_IT>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002168:	4610      	mov	r0, r2
 800216a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800216c:	e00e      	b.n	800218c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f990 	bl	8002494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002174:	e00a      	b.n	800218c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f98c 	bl	8002494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800217c:	e006      	b.n	800218c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f988 	bl	8002494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800218a:	e170      	b.n	800246e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800218c:	bf00      	nop
    return;
 800218e:	e16e      	b.n	800246e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	2b01      	cmp	r3, #1
 8002196:	f040 814a 	bne.w	800242e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800219a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8143 	beq.w	800242e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 813c 	beq.w	800242e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d6:	2b40      	cmp	r3, #64	; 0x40
 80021d8:	f040 80b4 	bne.w	8002344 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8140 	beq.w	8002472 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021fa:	429a      	cmp	r2, r3
 80021fc:	f080 8139 	bcs.w	8002472 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002206:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002212:	f000 8088 	beq.w	8002326 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	330c      	adds	r3, #12
 800221c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002220:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002224:	e853 3f00 	ldrex	r3, [r3]
 8002228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800222c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002242:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800224e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002252:	e841 2300 	strex	r3, r2, [r1]
 8002256:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800225a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1d9      	bne.n	8002216 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3314      	adds	r3, #20
 8002268:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800226c:	e853 3f00 	ldrex	r3, [r3]
 8002270:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3314      	adds	r3, #20
 8002282:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002286:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800228a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800228e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002292:	e841 2300 	strex	r3, r2, [r1]
 8002296:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1e1      	bne.n	8002262 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3314      	adds	r3, #20
 80022a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a8:	e853 3f00 	ldrex	r3, [r3]
 80022ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80022ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3314      	adds	r3, #20
 80022be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80022c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80022c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022ca:	e841 2300 	strex	r3, r2, [r1]
 80022ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80022d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e3      	bne.n	800229e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	330c      	adds	r3, #12
 80022ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ee:	e853 3f00 	ldrex	r3, [r3]
 80022f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80022f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f6:	f023 0310 	bic.w	r3, r3, #16
 80022fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	330c      	adds	r3, #12
 8002304:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002308:	65ba      	str	r2, [r7, #88]	; 0x58
 800230a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800230e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002310:	e841 2300 	strex	r3, r2, [r1]
 8002314:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1e3      	bne.n	80022e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fe54 	bl	8000fce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800232e:	b29b      	uxth	r3, r3
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	b29b      	uxth	r3, r3
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8b6 	bl	80024a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800233c:	e099      	b.n	8002472 <HAL_UART_IRQHandler+0x50e>
 800233e:	bf00      	nop
 8002340:	080026df 	.word	0x080026df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800234c:	b29b      	uxth	r3, r3
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 808b 	beq.w	8002476 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8086 	beq.w	8002476 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	330c      	adds	r3, #12
 8002370:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002374:	e853 3f00 	ldrex	r3, [r3]
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800237a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002380:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	330c      	adds	r3, #12
 800238a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800238e:	647a      	str	r2, [r7, #68]	; 0x44
 8002390:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002396:	e841 2300 	strex	r3, r2, [r1]
 800239a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800239c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1e3      	bne.n	800236a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3314      	adds	r3, #20
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	e853 3f00 	ldrex	r3, [r3]
 80023b0:	623b      	str	r3, [r7, #32]
   return(result);
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3314      	adds	r3, #20
 80023c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80023c6:	633a      	str	r2, [r7, #48]	; 0x30
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ce:	e841 2300 	strex	r3, r2, [r1]
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e3      	bne.n	80023a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	330c      	adds	r3, #12
 80023ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	e853 3f00 	ldrex	r3, [r3]
 80023f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f023 0310 	bic.w	r3, r3, #16
 80023fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	330c      	adds	r3, #12
 8002408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800240c:	61fa      	str	r2, [r7, #28]
 800240e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002410:	69b9      	ldr	r1, [r7, #24]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	e841 2300 	strex	r3, r2, [r1]
 8002418:	617b      	str	r3, [r7, #20]
   return(result);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e3      	bne.n	80023e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f83e 	bl	80024a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800242c:	e023      	b.n	8002476 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800242e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_UART_IRQHandler+0x4ea>
 800243a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f95d 	bl	8002706 <UART_Transmit_IT>
    return;
 800244c:	e014      	b.n	8002478 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00e      	beq.n	8002478 <HAL_UART_IRQHandler+0x514>
 800245a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f99d 	bl	80027a6 <UART_EndTransmit_IT>
    return;
 800246c:	e004      	b.n	8002478 <HAL_UART_IRQHandler+0x514>
    return;
 800246e:	bf00      	nop
 8002470:	e002      	b.n	8002478 <HAL_UART_IRQHandler+0x514>
      return;
 8002472:	bf00      	nop
 8002474:	e000      	b.n	8002478 <HAL_UART_IRQHandler+0x514>
      return;
 8002476:	bf00      	nop
  }
}
 8002478:	37e8      	adds	r7, #232	; 0xe8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop

08002480 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b090      	sub	sp, #64	; 0x40
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024d0:	e050      	b.n	8002574 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d04c      	beq.n	8002574 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80024e0:	f7fe fc58 	bl	8000d94 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d241      	bcs.n	8002574 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	e853 3f00 	ldrex	r3, [r3]
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002510:	637a      	str	r2, [r7, #52]	; 0x34
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002514:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002518:	e841 2300 	strex	r3, r2, [r1]
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e5      	bne.n	80024f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3314      	adds	r3, #20
 800252a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	e853 3f00 	ldrex	r3, [r3]
 8002532:	613b      	str	r3, [r7, #16]
   return(result);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	63bb      	str	r3, [r7, #56]	; 0x38
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3314      	adds	r3, #20
 8002542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002544:	623a      	str	r2, [r7, #32]
 8002546:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002548:	69f9      	ldr	r1, [r7, #28]
 800254a:	6a3a      	ldr	r2, [r7, #32]
 800254c:	e841 2300 	strex	r3, r2, [r1]
 8002550:	61bb      	str	r3, [r7, #24]
   return(result);
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e5      	bne.n	8002524 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e00f      	b.n	8002594 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4013      	ands	r3, r2
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	429a      	cmp	r2, r3
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	429a      	cmp	r2, r3
 8002590:	d09f      	beq.n	80024d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3740      	adds	r7, #64	; 0x40
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	88fa      	ldrh	r2, [r7, #6]
 80025b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	88fa      	ldrh	r2, [r7, #6]
 80025ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2222      	movs	r2, #34	; 0x22
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0220 	orr.w	r2, r2, #32
 8002608:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002618:	b480      	push	{r7}
 800261a:	b095      	sub	sp, #84	; 0x54
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	330c      	adds	r3, #12
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262a:	e853 3f00 	ldrex	r3, [r3]
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002640:	643a      	str	r2, [r7, #64]	; 0x40
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002644:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002646:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002648:	e841 2300 	strex	r3, r2, [r1]
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e5      	bne.n	8002620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3314      	adds	r3, #20
 800265a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	e853 3f00 	ldrex	r3, [r3]
 8002662:	61fb      	str	r3, [r7, #28]
   return(result);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	64bb      	str	r3, [r7, #72]	; 0x48
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3314      	adds	r3, #20
 8002672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002674:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800267a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267c:	e841 2300 	strex	r3, r2, [r1]
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e5      	bne.n	8002654 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	2b01      	cmp	r3, #1
 800268e:	d119      	bne.n	80026c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	330c      	adds	r3, #12
 8002696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	e853 3f00 	ldrex	r3, [r3]
 800269e:	60bb      	str	r3, [r7, #8]
   return(result);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f023 0310 	bic.w	r3, r3, #16
 80026a6:	647b      	str	r3, [r7, #68]	; 0x44
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	330c      	adds	r3, #12
 80026ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026b0:	61ba      	str	r2, [r7, #24]
 80026b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b4:	6979      	ldr	r1, [r7, #20]
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	e841 2300 	strex	r3, r2, [r1]
 80026bc:	613b      	str	r3, [r7, #16]
   return(result);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1e5      	bne.n	8002690 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026d2:	bf00      	nop
 80026d4:	3754      	adds	r7, #84	; 0x54
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff fecb 	bl	8002494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b21      	cmp	r3, #33	; 0x21
 8002718:	d13e      	bne.n	8002798 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002722:	d114      	bne.n	800274e <UART_Transmit_IT+0x48>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d110      	bne.n	800274e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002740:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	1c9a      	adds	r2, r3, #2
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	621a      	str	r2, [r3, #32]
 800274c:	e008      	b.n	8002760 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	1c59      	adds	r1, r3, #1
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6211      	str	r1, [r2, #32]
 8002758:	781a      	ldrb	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29b      	uxth	r3, r3
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4619      	mov	r1, r3
 800276e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10f      	bne.n	8002794 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002782:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002792:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fe5a 	bl	8002480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b08c      	sub	sp, #48	; 0x30
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b22      	cmp	r3, #34	; 0x22
 80027e8:	f040 80ab 	bne.w	8002942 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f4:	d117      	bne.n	8002826 <UART_Receive_IT+0x50>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d113      	bne.n	8002826 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	b29b      	uxth	r3, r3
 8002810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002814:	b29a      	uxth	r2, r3
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	1c9a      	adds	r2, r3, #2
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
 8002824:	e026      	b.n	8002874 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002838:	d007      	beq.n	800284a <UART_Receive_IT+0x74>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10a      	bne.n	8002858 <UART_Receive_IT+0x82>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e008      	b.n	800286a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002864:	b2da      	uxtb	r2, r3
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29b      	uxth	r3, r3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4619      	mov	r1, r3
 8002882:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002884:	2b00      	cmp	r3, #0
 8002886:	d15a      	bne.n	800293e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0220 	bic.w	r2, r2, #32
 8002896:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d135      	bne.n	8002934 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	330c      	adds	r3, #12
 80028d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	e853 3f00 	ldrex	r3, [r3]
 80028dc:	613b      	str	r3, [r7, #16]
   return(result);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f023 0310 	bic.w	r3, r3, #16
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	330c      	adds	r3, #12
 80028ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ee:	623a      	str	r2, [r7, #32]
 80028f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f2:	69f9      	ldr	r1, [r7, #28]
 80028f4:	6a3a      	ldr	r2, [r7, #32]
 80028f6:	e841 2300 	strex	r3, r2, [r1]
 80028fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1e5      	bne.n	80028ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b10      	cmp	r3, #16
 800290e:	d10a      	bne.n	8002926 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800292a:	4619      	mov	r1, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff fdbb 	bl	80024a8 <HAL_UARTEx_RxEventCallback>
 8002932:	e002      	b.n	800293a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7fe f877 	bl	8000a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e002      	b.n	8002944 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	3730      	adds	r7, #48	; 0x30
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800294c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002950:	b0c0      	sub	sp, #256	; 0x100
 8002952:	af00      	add	r7, sp, #0
 8002954:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002968:	68d9      	ldr	r1, [r3, #12]
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	ea40 0301 	orr.w	r3, r0, r1
 8002974:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	431a      	orrs	r2, r3
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	431a      	orrs	r2, r3
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029a4:	f021 010c 	bic.w	r1, r1, #12
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029b2:	430b      	orrs	r3, r1
 80029b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c6:	6999      	ldr	r1, [r3, #24]
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	ea40 0301 	orr.w	r3, r0, r1
 80029d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b8f      	ldr	r3, [pc, #572]	; (8002c18 <UART_SetConfig+0x2cc>)
 80029dc:	429a      	cmp	r2, r3
 80029de:	d005      	beq.n	80029ec <UART_SetConfig+0xa0>
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b8d      	ldr	r3, [pc, #564]	; (8002c1c <UART_SetConfig+0x2d0>)
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d104      	bne.n	80029f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029ec:	f7ff f996 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 80029f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029f4:	e003      	b.n	80029fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029f6:	f7ff f97d 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 80029fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a08:	f040 810c 	bne.w	8002c24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a10:	2200      	movs	r2, #0
 8002a12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a1e:	4622      	mov	r2, r4
 8002a20:	462b      	mov	r3, r5
 8002a22:	1891      	adds	r1, r2, r2
 8002a24:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a26:	415b      	adcs	r3, r3
 8002a28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a2e:	4621      	mov	r1, r4
 8002a30:	eb12 0801 	adds.w	r8, r2, r1
 8002a34:	4629      	mov	r1, r5
 8002a36:	eb43 0901 	adc.w	r9, r3, r1
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a4e:	4690      	mov	r8, r2
 8002a50:	4699      	mov	r9, r3
 8002a52:	4623      	mov	r3, r4
 8002a54:	eb18 0303 	adds.w	r3, r8, r3
 8002a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a5c:	462b      	mov	r3, r5
 8002a5e:	eb49 0303 	adc.w	r3, r9, r3
 8002a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	18db      	adds	r3, r3, r3
 8002a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a80:	4613      	mov	r3, r2
 8002a82:	eb42 0303 	adc.w	r3, r2, r3
 8002a86:	657b      	str	r3, [r7, #84]	; 0x54
 8002a88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a90:	f7fd fbf6 	bl	8000280 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <UART_SetConfig+0x2d4>)
 8002a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	011c      	lsls	r4, r3, #4
 8002aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002aac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ab0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ab4:	4642      	mov	r2, r8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	1891      	adds	r1, r2, r2
 8002aba:	64b9      	str	r1, [r7, #72]	; 0x48
 8002abc:	415b      	adcs	r3, r3
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	eb12 0a01 	adds.w	sl, r2, r1
 8002aca:	4649      	mov	r1, r9
 8002acc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002adc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ae4:	4692      	mov	sl, r2
 8002ae6:	469b      	mov	fp, r3
 8002ae8:	4643      	mov	r3, r8
 8002aea:	eb1a 0303 	adds.w	r3, sl, r3
 8002aee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002af2:	464b      	mov	r3, r9
 8002af4:	eb4b 0303 	adc.w	r3, fp, r3
 8002af8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b10:	460b      	mov	r3, r1
 8002b12:	18db      	adds	r3, r3, r3
 8002b14:	643b      	str	r3, [r7, #64]	; 0x40
 8002b16:	4613      	mov	r3, r2
 8002b18:	eb42 0303 	adc.w	r3, r2, r3
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b26:	f7fd fbab 	bl	8000280 <__aeabi_uldivmod>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <UART_SetConfig+0x2d4>)
 8002b32:	fba3 2301 	umull	r2, r3, r3, r1
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2264      	movs	r2, #100	; 0x64
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	1acb      	subs	r3, r1, r3
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b46:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <UART_SetConfig+0x2d4>)
 8002b48:	fba3 2302 	umull	r2, r3, r3, r2
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b54:	441c      	add	r4, r3
 8002b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b68:	4642      	mov	r2, r8
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	1891      	adds	r1, r2, r2
 8002b6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b70:	415b      	adcs	r3, r3
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b78:	4641      	mov	r1, r8
 8002b7a:	1851      	adds	r1, r2, r1
 8002b7c:	6339      	str	r1, [r7, #48]	; 0x30
 8002b7e:	4649      	mov	r1, r9
 8002b80:	414b      	adcs	r3, r1
 8002b82:	637b      	str	r3, [r7, #52]	; 0x34
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b90:	4659      	mov	r1, fp
 8002b92:	00cb      	lsls	r3, r1, #3
 8002b94:	4651      	mov	r1, sl
 8002b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	00ca      	lsls	r2, r1, #3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4642      	mov	r2, r8
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bac:	464b      	mov	r3, r9
 8002bae:	460a      	mov	r2, r1
 8002bb0:	eb42 0303 	adc.w	r3, r2, r3
 8002bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bcc:	460b      	mov	r3, r1
 8002bce:	18db      	adds	r3, r3, r3
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	eb42 0303 	adc.w	r3, r2, r3
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002be2:	f7fd fb4d 	bl	8000280 <__aeabi_uldivmod>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <UART_SetConfig+0x2d4>)
 8002bec:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	2164      	movs	r1, #100	; 0x64
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	3332      	adds	r3, #50	; 0x32
 8002bfe:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <UART_SetConfig+0x2d4>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	f003 0207 	and.w	r2, r3, #7
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4422      	add	r2, r4
 8002c12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c14:	e105      	b.n	8002e22 <UART_SetConfig+0x4d6>
 8002c16:	bf00      	nop
 8002c18:	40011000 	.word	0x40011000
 8002c1c:	40011400 	.word	0x40011400
 8002c20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c36:	4642      	mov	r2, r8
 8002c38:	464b      	mov	r3, r9
 8002c3a:	1891      	adds	r1, r2, r2
 8002c3c:	6239      	str	r1, [r7, #32]
 8002c3e:	415b      	adcs	r3, r3
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c46:	4641      	mov	r1, r8
 8002c48:	1854      	adds	r4, r2, r1
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	eb43 0501 	adc.w	r5, r3, r1
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	00eb      	lsls	r3, r5, #3
 8002c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5e:	00e2      	lsls	r2, r4, #3
 8002c60:	4614      	mov	r4, r2
 8002c62:	461d      	mov	r5, r3
 8002c64:	4643      	mov	r3, r8
 8002c66:	18e3      	adds	r3, r4, r3
 8002c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c6c:	464b      	mov	r3, r9
 8002c6e:	eb45 0303 	adc.w	r3, r5, r3
 8002c72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c92:	4629      	mov	r1, r5
 8002c94:	008b      	lsls	r3, r1, #2
 8002c96:	4621      	mov	r1, r4
 8002c98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	008a      	lsls	r2, r1, #2
 8002ca0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ca4:	f7fd faec 	bl	8000280 <__aeabi_uldivmod>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4b60      	ldr	r3, [pc, #384]	; (8002e30 <UART_SetConfig+0x4e4>)
 8002cae:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	011c      	lsls	r4, r3, #4
 8002cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cc8:	4642      	mov	r2, r8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	1891      	adds	r1, r2, r2
 8002cce:	61b9      	str	r1, [r7, #24]
 8002cd0:	415b      	adcs	r3, r3
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd8:	4641      	mov	r1, r8
 8002cda:	1851      	adds	r1, r2, r1
 8002cdc:	6139      	str	r1, [r7, #16]
 8002cde:	4649      	mov	r1, r9
 8002ce0:	414b      	adcs	r3, r1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	00cb      	lsls	r3, r1, #3
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	00ca      	lsls	r2, r1, #3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	4642      	mov	r2, r8
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d0c:	464b      	mov	r3, r9
 8002d0e:	460a      	mov	r2, r1
 8002d10:	eb42 0303 	adc.w	r3, r2, r3
 8002d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d30:	4649      	mov	r1, r9
 8002d32:	008b      	lsls	r3, r1, #2
 8002d34:	4641      	mov	r1, r8
 8002d36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	008a      	lsls	r2, r1, #2
 8002d3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d42:	f7fd fa9d 	bl	8000280 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <UART_SetConfig+0x4e4>)
 8002d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	2164      	movs	r1, #100	; 0x64
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	3332      	adds	r3, #50	; 0x32
 8002d5e:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <UART_SetConfig+0x4e4>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6a:	441c      	add	r4, r3
 8002d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d70:	2200      	movs	r2, #0
 8002d72:	673b      	str	r3, [r7, #112]	; 0x70
 8002d74:	677a      	str	r2, [r7, #116]	; 0x74
 8002d76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d7a:	4642      	mov	r2, r8
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	1891      	adds	r1, r2, r2
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	415b      	adcs	r3, r3
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d8a:	4641      	mov	r1, r8
 8002d8c:	1851      	adds	r1, r2, r1
 8002d8e:	6039      	str	r1, [r7, #0]
 8002d90:	4649      	mov	r1, r9
 8002d92:	414b      	adcs	r3, r1
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002da2:	4659      	mov	r1, fp
 8002da4:	00cb      	lsls	r3, r1, #3
 8002da6:	4651      	mov	r1, sl
 8002da8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dac:	4651      	mov	r1, sl
 8002dae:	00ca      	lsls	r2, r1, #3
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	4603      	mov	r3, r0
 8002db6:	4642      	mov	r2, r8
 8002db8:	189b      	adds	r3, r3, r2
 8002dba:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	460a      	mov	r2, r1
 8002dc0:	eb42 0303 	adc.w	r3, r2, r3
 8002dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	663b      	str	r3, [r7, #96]	; 0x60
 8002dd0:	667a      	str	r2, [r7, #100]	; 0x64
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dde:	4649      	mov	r1, r9
 8002de0:	008b      	lsls	r3, r1, #2
 8002de2:	4641      	mov	r1, r8
 8002de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002de8:	4641      	mov	r1, r8
 8002dea:	008a      	lsls	r2, r1, #2
 8002dec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002df0:	f7fd fa46 	bl	8000280 <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <UART_SetConfig+0x4e4>)
 8002dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2164      	movs	r1, #100	; 0x64
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	3332      	adds	r3, #50	; 0x32
 8002e0c:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <UART_SetConfig+0x4e4>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4422      	add	r2, r4
 8002e20:	609a      	str	r2, [r3, #8]
}
 8002e22:	bf00      	nop
 8002e24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2e:	bf00      	nop
 8002e30:	51eb851f 	.word	0x51eb851f

08002e34 <__errno>:
 8002e34:	4b01      	ldr	r3, [pc, #4]	; (8002e3c <__errno+0x8>)
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	2000020c 	.word	0x2000020c

08002e40 <__libc_init_array>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	4d0d      	ldr	r5, [pc, #52]	; (8002e78 <__libc_init_array+0x38>)
 8002e44:	4c0d      	ldr	r4, [pc, #52]	; (8002e7c <__libc_init_array+0x3c>)
 8002e46:	1b64      	subs	r4, r4, r5
 8002e48:	10a4      	asrs	r4, r4, #2
 8002e4a:	2600      	movs	r6, #0
 8002e4c:	42a6      	cmp	r6, r4
 8002e4e:	d109      	bne.n	8002e64 <__libc_init_array+0x24>
 8002e50:	4d0b      	ldr	r5, [pc, #44]	; (8002e80 <__libc_init_array+0x40>)
 8002e52:	4c0c      	ldr	r4, [pc, #48]	; (8002e84 <__libc_init_array+0x44>)
 8002e54:	f000 fe20 	bl	8003a98 <_init>
 8002e58:	1b64      	subs	r4, r4, r5
 8002e5a:	10a4      	asrs	r4, r4, #2
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	42a6      	cmp	r6, r4
 8002e60:	d105      	bne.n	8002e6e <__libc_init_array+0x2e>
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e68:	4798      	blx	r3
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	e7ee      	b.n	8002e4c <__libc_init_array+0xc>
 8002e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e72:	4798      	blx	r3
 8002e74:	3601      	adds	r6, #1
 8002e76:	e7f2      	b.n	8002e5e <__libc_init_array+0x1e>
 8002e78:	08003c7c 	.word	0x08003c7c
 8002e7c:	08003c7c 	.word	0x08003c7c
 8002e80:	08003c7c 	.word	0x08003c7c
 8002e84:	08003c80 	.word	0x08003c80

08002e88 <memcpy>:
 8002e88:	440a      	add	r2, r1
 8002e8a:	4291      	cmp	r1, r2
 8002e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e90:	d100      	bne.n	8002e94 <memcpy+0xc>
 8002e92:	4770      	bx	lr
 8002e94:	b510      	push	{r4, lr}
 8002e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e9e:	4291      	cmp	r1, r2
 8002ea0:	d1f9      	bne.n	8002e96 <memcpy+0xe>
 8002ea2:	bd10      	pop	{r4, pc}

08002ea4 <memset>:
 8002ea4:	4402      	add	r2, r0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d100      	bne.n	8002eae <memset+0xa>
 8002eac:	4770      	bx	lr
 8002eae:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb2:	e7f9      	b.n	8002ea8 <memset+0x4>

08002eb4 <siscanf>:
 8002eb4:	b40e      	push	{r1, r2, r3}
 8002eb6:	b510      	push	{r4, lr}
 8002eb8:	b09f      	sub	sp, #124	; 0x7c
 8002eba:	ac21      	add	r4, sp, #132	; 0x84
 8002ebc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002ec0:	f854 2b04 	ldr.w	r2, [r4], #4
 8002ec4:	9201      	str	r2, [sp, #4]
 8002ec6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8002eca:	9004      	str	r0, [sp, #16]
 8002ecc:	9008      	str	r0, [sp, #32]
 8002ece:	f7fd f97f 	bl	80001d0 <strlen>
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <siscanf+0x50>)
 8002ed4:	9005      	str	r0, [sp, #20]
 8002ed6:	9009      	str	r0, [sp, #36]	; 0x24
 8002ed8:	930d      	str	r3, [sp, #52]	; 0x34
 8002eda:	480b      	ldr	r0, [pc, #44]	; (8002f08 <siscanf+0x54>)
 8002edc:	9a01      	ldr	r2, [sp, #4]
 8002ede:	6800      	ldr	r0, [r0, #0]
 8002ee0:	9403      	str	r4, [sp, #12]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9311      	str	r3, [sp, #68]	; 0x44
 8002ee6:	9316      	str	r3, [sp, #88]	; 0x58
 8002ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002ef0:	a904      	add	r1, sp, #16
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	f000 f866 	bl	8002fc4 <__ssvfiscanf_r>
 8002ef8:	b01f      	add	sp, #124	; 0x7c
 8002efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002efe:	b003      	add	sp, #12
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	08002f0d 	.word	0x08002f0d
 8002f08:	2000020c 	.word	0x2000020c

08002f0c <__seofread>:
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	4770      	bx	lr

08002f10 <_sungetc_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	1c4b      	adds	r3, r1, #1
 8002f14:	4614      	mov	r4, r2
 8002f16:	d103      	bne.n	8002f20 <_sungetc_r+0x10>
 8002f18:	f04f 35ff 	mov.w	r5, #4294967295
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	bd38      	pop	{r3, r4, r5, pc}
 8002f20:	8993      	ldrh	r3, [r2, #12]
 8002f22:	f023 0320 	bic.w	r3, r3, #32
 8002f26:	8193      	strh	r3, [r2, #12]
 8002f28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f2a:	6852      	ldr	r2, [r2, #4]
 8002f2c:	b2cd      	uxtb	r5, r1
 8002f2e:	b18b      	cbz	r3, 8002f54 <_sungetc_r+0x44>
 8002f30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f32:	4293      	cmp	r3, r2
 8002f34:	dd08      	ble.n	8002f48 <_sungetc_r+0x38>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	1e5a      	subs	r2, r3, #1
 8002f3a:	6022      	str	r2, [r4, #0]
 8002f3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002f40:	6863      	ldr	r3, [r4, #4]
 8002f42:	3301      	adds	r3, #1
 8002f44:	6063      	str	r3, [r4, #4]
 8002f46:	e7e9      	b.n	8002f1c <_sungetc_r+0xc>
 8002f48:	4621      	mov	r1, r4
 8002f4a:	f000 fc35 	bl	80037b8 <__submore>
 8002f4e:	2800      	cmp	r0, #0
 8002f50:	d0f1      	beq.n	8002f36 <_sungetc_r+0x26>
 8002f52:	e7e1      	b.n	8002f18 <_sungetc_r+0x8>
 8002f54:	6921      	ldr	r1, [r4, #16]
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	b151      	cbz	r1, 8002f70 <_sungetc_r+0x60>
 8002f5a:	4299      	cmp	r1, r3
 8002f5c:	d208      	bcs.n	8002f70 <_sungetc_r+0x60>
 8002f5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002f62:	42a9      	cmp	r1, r5
 8002f64:	d104      	bne.n	8002f70 <_sungetc_r+0x60>
 8002f66:	3b01      	subs	r3, #1
 8002f68:	3201      	adds	r2, #1
 8002f6a:	6023      	str	r3, [r4, #0]
 8002f6c:	6062      	str	r2, [r4, #4]
 8002f6e:	e7d5      	b.n	8002f1c <_sungetc_r+0xc>
 8002f70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f78:	6363      	str	r3, [r4, #52]	; 0x34
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8002f7e:	4623      	mov	r3, r4
 8002f80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	2301      	movs	r3, #1
 8002f88:	e7dc      	b.n	8002f44 <_sungetc_r+0x34>

08002f8a <__ssrefill_r>:
 8002f8a:	b510      	push	{r4, lr}
 8002f8c:	460c      	mov	r4, r1
 8002f8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002f90:	b169      	cbz	r1, 8002fae <__ssrefill_r+0x24>
 8002f92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f96:	4299      	cmp	r1, r3
 8002f98:	d001      	beq.n	8002f9e <__ssrefill_r+0x14>
 8002f9a:	f000 fc49 	bl	8003830 <_free_r>
 8002f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fa0:	6063      	str	r3, [r4, #4]
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	6360      	str	r0, [r4, #52]	; 0x34
 8002fa6:	b113      	cbz	r3, 8002fae <__ssrefill_r+0x24>
 8002fa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	bd10      	pop	{r4, pc}
 8002fae:	6923      	ldr	r3, [r4, #16]
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6063      	str	r3, [r4, #4]
 8002fb6:	89a3      	ldrh	r3, [r4, #12]
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	81a3      	strh	r3, [r4, #12]
 8002fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc2:	e7f3      	b.n	8002fac <__ssrefill_r+0x22>

08002fc4 <__ssvfiscanf_r>:
 8002fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fc8:	460c      	mov	r4, r1
 8002fca:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8002fce:	2100      	movs	r1, #0
 8002fd0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002fd4:	49a6      	ldr	r1, [pc, #664]	; (8003270 <__ssvfiscanf_r+0x2ac>)
 8002fd6:	91a0      	str	r1, [sp, #640]	; 0x280
 8002fd8:	f10d 0804 	add.w	r8, sp, #4
 8002fdc:	49a5      	ldr	r1, [pc, #660]	; (8003274 <__ssvfiscanf_r+0x2b0>)
 8002fde:	4fa6      	ldr	r7, [pc, #664]	; (8003278 <__ssvfiscanf_r+0x2b4>)
 8002fe0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800327c <__ssvfiscanf_r+0x2b8>
 8002fe4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002fe8:	4606      	mov	r6, r0
 8002fea:	91a1      	str	r1, [sp, #644]	; 0x284
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	7813      	ldrb	r3, [r2, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 815a 	beq.w	80032aa <__ssvfiscanf_r+0x2e6>
 8002ff6:	5dd9      	ldrb	r1, [r3, r7]
 8002ff8:	f011 0108 	ands.w	r1, r1, #8
 8002ffc:	f102 0501 	add.w	r5, r2, #1
 8003000:	d019      	beq.n	8003036 <__ssvfiscanf_r+0x72>
 8003002:	6863      	ldr	r3, [r4, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	dd0f      	ble.n	8003028 <__ssvfiscanf_r+0x64>
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	5cba      	ldrb	r2, [r7, r2]
 800300e:	0712      	lsls	r2, r2, #28
 8003010:	d401      	bmi.n	8003016 <__ssvfiscanf_r+0x52>
 8003012:	462a      	mov	r2, r5
 8003014:	e7eb      	b.n	8002fee <__ssvfiscanf_r+0x2a>
 8003016:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003018:	3201      	adds	r2, #1
 800301a:	9245      	str	r2, [sp, #276]	; 0x114
 800301c:	6862      	ldr	r2, [r4, #4]
 800301e:	3301      	adds	r3, #1
 8003020:	3a01      	subs	r2, #1
 8003022:	6062      	str	r2, [r4, #4]
 8003024:	6023      	str	r3, [r4, #0]
 8003026:	e7ec      	b.n	8003002 <__ssvfiscanf_r+0x3e>
 8003028:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800302a:	4621      	mov	r1, r4
 800302c:	4630      	mov	r0, r6
 800302e:	4798      	blx	r3
 8003030:	2800      	cmp	r0, #0
 8003032:	d0e9      	beq.n	8003008 <__ssvfiscanf_r+0x44>
 8003034:	e7ed      	b.n	8003012 <__ssvfiscanf_r+0x4e>
 8003036:	2b25      	cmp	r3, #37	; 0x25
 8003038:	d012      	beq.n	8003060 <__ssvfiscanf_r+0x9c>
 800303a:	469a      	mov	sl, r3
 800303c:	6863      	ldr	r3, [r4, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f340 8091 	ble.w	8003166 <__ssvfiscanf_r+0x1a2>
 8003044:	6822      	ldr	r2, [r4, #0]
 8003046:	7813      	ldrb	r3, [r2, #0]
 8003048:	4553      	cmp	r3, sl
 800304a:	f040 812e 	bne.w	80032aa <__ssvfiscanf_r+0x2e6>
 800304e:	6863      	ldr	r3, [r4, #4]
 8003050:	3b01      	subs	r3, #1
 8003052:	6063      	str	r3, [r4, #4]
 8003054:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003056:	3201      	adds	r2, #1
 8003058:	3301      	adds	r3, #1
 800305a:	6022      	str	r2, [r4, #0]
 800305c:	9345      	str	r3, [sp, #276]	; 0x114
 800305e:	e7d8      	b.n	8003012 <__ssvfiscanf_r+0x4e>
 8003060:	9141      	str	r1, [sp, #260]	; 0x104
 8003062:	9143      	str	r1, [sp, #268]	; 0x10c
 8003064:	7853      	ldrb	r3, [r2, #1]
 8003066:	2b2a      	cmp	r3, #42	; 0x2a
 8003068:	bf02      	ittt	eq
 800306a:	2310      	moveq	r3, #16
 800306c:	1c95      	addeq	r5, r2, #2
 800306e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003070:	220a      	movs	r2, #10
 8003072:	46aa      	mov	sl, r5
 8003074:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003078:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800307c:	2b09      	cmp	r3, #9
 800307e:	d91d      	bls.n	80030bc <__ssvfiscanf_r+0xf8>
 8003080:	487e      	ldr	r0, [pc, #504]	; (800327c <__ssvfiscanf_r+0x2b8>)
 8003082:	2203      	movs	r2, #3
 8003084:	f7fd f8ac 	bl	80001e0 <memchr>
 8003088:	b140      	cbz	r0, 800309c <__ssvfiscanf_r+0xd8>
 800308a:	2301      	movs	r3, #1
 800308c:	eba0 0009 	sub.w	r0, r0, r9
 8003090:	fa03 f000 	lsl.w	r0, r3, r0
 8003094:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003096:	4318      	orrs	r0, r3
 8003098:	9041      	str	r0, [sp, #260]	; 0x104
 800309a:	4655      	mov	r5, sl
 800309c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80030a0:	2b78      	cmp	r3, #120	; 0x78
 80030a2:	d806      	bhi.n	80030b2 <__ssvfiscanf_r+0xee>
 80030a4:	2b57      	cmp	r3, #87	; 0x57
 80030a6:	d810      	bhi.n	80030ca <__ssvfiscanf_r+0x106>
 80030a8:	2b25      	cmp	r3, #37	; 0x25
 80030aa:	d0c6      	beq.n	800303a <__ssvfiscanf_r+0x76>
 80030ac:	d856      	bhi.n	800315c <__ssvfiscanf_r+0x198>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d064      	beq.n	800317c <__ssvfiscanf_r+0x1b8>
 80030b2:	2303      	movs	r3, #3
 80030b4:	9347      	str	r3, [sp, #284]	; 0x11c
 80030b6:	230a      	movs	r3, #10
 80030b8:	9342      	str	r3, [sp, #264]	; 0x108
 80030ba:	e071      	b.n	80031a0 <__ssvfiscanf_r+0x1dc>
 80030bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80030be:	fb02 1103 	mla	r1, r2, r3, r1
 80030c2:	3930      	subs	r1, #48	; 0x30
 80030c4:	9143      	str	r1, [sp, #268]	; 0x10c
 80030c6:	4655      	mov	r5, sl
 80030c8:	e7d3      	b.n	8003072 <__ssvfiscanf_r+0xae>
 80030ca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80030ce:	2a20      	cmp	r2, #32
 80030d0:	d8ef      	bhi.n	80030b2 <__ssvfiscanf_r+0xee>
 80030d2:	a101      	add	r1, pc, #4	; (adr r1, 80030d8 <__ssvfiscanf_r+0x114>)
 80030d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80030d8:	0800318b 	.word	0x0800318b
 80030dc:	080030b3 	.word	0x080030b3
 80030e0:	080030b3 	.word	0x080030b3
 80030e4:	080031e9 	.word	0x080031e9
 80030e8:	080030b3 	.word	0x080030b3
 80030ec:	080030b3 	.word	0x080030b3
 80030f0:	080030b3 	.word	0x080030b3
 80030f4:	080030b3 	.word	0x080030b3
 80030f8:	080030b3 	.word	0x080030b3
 80030fc:	080030b3 	.word	0x080030b3
 8003100:	080030b3 	.word	0x080030b3
 8003104:	080031ff 	.word	0x080031ff
 8003108:	080031d5 	.word	0x080031d5
 800310c:	08003163 	.word	0x08003163
 8003110:	08003163 	.word	0x08003163
 8003114:	08003163 	.word	0x08003163
 8003118:	080030b3 	.word	0x080030b3
 800311c:	080031d9 	.word	0x080031d9
 8003120:	080030b3 	.word	0x080030b3
 8003124:	080030b3 	.word	0x080030b3
 8003128:	080030b3 	.word	0x080030b3
 800312c:	080030b3 	.word	0x080030b3
 8003130:	0800320f 	.word	0x0800320f
 8003134:	080031e1 	.word	0x080031e1
 8003138:	08003183 	.word	0x08003183
 800313c:	080030b3 	.word	0x080030b3
 8003140:	080030b3 	.word	0x080030b3
 8003144:	0800320b 	.word	0x0800320b
 8003148:	080030b3 	.word	0x080030b3
 800314c:	080031d5 	.word	0x080031d5
 8003150:	080030b3 	.word	0x080030b3
 8003154:	080030b3 	.word	0x080030b3
 8003158:	0800318b 	.word	0x0800318b
 800315c:	3b45      	subs	r3, #69	; 0x45
 800315e:	2b02      	cmp	r3, #2
 8003160:	d8a7      	bhi.n	80030b2 <__ssvfiscanf_r+0xee>
 8003162:	2305      	movs	r3, #5
 8003164:	e01b      	b.n	800319e <__ssvfiscanf_r+0x1da>
 8003166:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003168:	4621      	mov	r1, r4
 800316a:	4630      	mov	r0, r6
 800316c:	4798      	blx	r3
 800316e:	2800      	cmp	r0, #0
 8003170:	f43f af68 	beq.w	8003044 <__ssvfiscanf_r+0x80>
 8003174:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003176:	2800      	cmp	r0, #0
 8003178:	f040 808d 	bne.w	8003296 <__ssvfiscanf_r+0x2d2>
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	e08f      	b.n	80032a2 <__ssvfiscanf_r+0x2de>
 8003182:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003184:	f042 0220 	orr.w	r2, r2, #32
 8003188:	9241      	str	r2, [sp, #260]	; 0x104
 800318a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800318c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003190:	9241      	str	r2, [sp, #260]	; 0x104
 8003192:	2210      	movs	r2, #16
 8003194:	2b6f      	cmp	r3, #111	; 0x6f
 8003196:	9242      	str	r2, [sp, #264]	; 0x108
 8003198:	bf34      	ite	cc
 800319a:	2303      	movcc	r3, #3
 800319c:	2304      	movcs	r3, #4
 800319e:	9347      	str	r3, [sp, #284]	; 0x11c
 80031a0:	6863      	ldr	r3, [r4, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	dd42      	ble.n	800322c <__ssvfiscanf_r+0x268>
 80031a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80031a8:	0659      	lsls	r1, r3, #25
 80031aa:	d404      	bmi.n	80031b6 <__ssvfiscanf_r+0x1f2>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	5cba      	ldrb	r2, [r7, r2]
 80031b2:	0712      	lsls	r2, r2, #28
 80031b4:	d441      	bmi.n	800323a <__ssvfiscanf_r+0x276>
 80031b6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	dc50      	bgt.n	800325e <__ssvfiscanf_r+0x29a>
 80031bc:	466b      	mov	r3, sp
 80031be:	4622      	mov	r2, r4
 80031c0:	a941      	add	r1, sp, #260	; 0x104
 80031c2:	4630      	mov	r0, r6
 80031c4:	f000 f876 	bl	80032b4 <_scanf_chars>
 80031c8:	2801      	cmp	r0, #1
 80031ca:	d06e      	beq.n	80032aa <__ssvfiscanf_r+0x2e6>
 80031cc:	2802      	cmp	r0, #2
 80031ce:	f47f af20 	bne.w	8003012 <__ssvfiscanf_r+0x4e>
 80031d2:	e7cf      	b.n	8003174 <__ssvfiscanf_r+0x1b0>
 80031d4:	220a      	movs	r2, #10
 80031d6:	e7dd      	b.n	8003194 <__ssvfiscanf_r+0x1d0>
 80031d8:	2300      	movs	r3, #0
 80031da:	9342      	str	r3, [sp, #264]	; 0x108
 80031dc:	2303      	movs	r3, #3
 80031de:	e7de      	b.n	800319e <__ssvfiscanf_r+0x1da>
 80031e0:	2308      	movs	r3, #8
 80031e2:	9342      	str	r3, [sp, #264]	; 0x108
 80031e4:	2304      	movs	r3, #4
 80031e6:	e7da      	b.n	800319e <__ssvfiscanf_r+0x1da>
 80031e8:	4629      	mov	r1, r5
 80031ea:	4640      	mov	r0, r8
 80031ec:	f000 f9b4 	bl	8003558 <__sccl>
 80031f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80031f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f6:	9341      	str	r3, [sp, #260]	; 0x104
 80031f8:	4605      	mov	r5, r0
 80031fa:	2301      	movs	r3, #1
 80031fc:	e7cf      	b.n	800319e <__ssvfiscanf_r+0x1da>
 80031fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003204:	9341      	str	r3, [sp, #260]	; 0x104
 8003206:	2300      	movs	r3, #0
 8003208:	e7c9      	b.n	800319e <__ssvfiscanf_r+0x1da>
 800320a:	2302      	movs	r3, #2
 800320c:	e7c7      	b.n	800319e <__ssvfiscanf_r+0x1da>
 800320e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003210:	06c3      	lsls	r3, r0, #27
 8003212:	f53f aefe 	bmi.w	8003012 <__ssvfiscanf_r+0x4e>
 8003216:	9b00      	ldr	r3, [sp, #0]
 8003218:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800321a:	1d19      	adds	r1, r3, #4
 800321c:	9100      	str	r1, [sp, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f010 0f01 	tst.w	r0, #1
 8003224:	bf14      	ite	ne
 8003226:	801a      	strhne	r2, [r3, #0]
 8003228:	601a      	streq	r2, [r3, #0]
 800322a:	e6f2      	b.n	8003012 <__ssvfiscanf_r+0x4e>
 800322c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800322e:	4621      	mov	r1, r4
 8003230:	4630      	mov	r0, r6
 8003232:	4798      	blx	r3
 8003234:	2800      	cmp	r0, #0
 8003236:	d0b6      	beq.n	80031a6 <__ssvfiscanf_r+0x1e2>
 8003238:	e79c      	b.n	8003174 <__ssvfiscanf_r+0x1b0>
 800323a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800323c:	3201      	adds	r2, #1
 800323e:	9245      	str	r2, [sp, #276]	; 0x114
 8003240:	6862      	ldr	r2, [r4, #4]
 8003242:	3a01      	subs	r2, #1
 8003244:	2a00      	cmp	r2, #0
 8003246:	6062      	str	r2, [r4, #4]
 8003248:	dd02      	ble.n	8003250 <__ssvfiscanf_r+0x28c>
 800324a:	3301      	adds	r3, #1
 800324c:	6023      	str	r3, [r4, #0]
 800324e:	e7ad      	b.n	80031ac <__ssvfiscanf_r+0x1e8>
 8003250:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003252:	4621      	mov	r1, r4
 8003254:	4630      	mov	r0, r6
 8003256:	4798      	blx	r3
 8003258:	2800      	cmp	r0, #0
 800325a:	d0a7      	beq.n	80031ac <__ssvfiscanf_r+0x1e8>
 800325c:	e78a      	b.n	8003174 <__ssvfiscanf_r+0x1b0>
 800325e:	2b04      	cmp	r3, #4
 8003260:	dc0e      	bgt.n	8003280 <__ssvfiscanf_r+0x2bc>
 8003262:	466b      	mov	r3, sp
 8003264:	4622      	mov	r2, r4
 8003266:	a941      	add	r1, sp, #260	; 0x104
 8003268:	4630      	mov	r0, r6
 800326a:	f000 f87d 	bl	8003368 <_scanf_i>
 800326e:	e7ab      	b.n	80031c8 <__ssvfiscanf_r+0x204>
 8003270:	08002f11 	.word	0x08002f11
 8003274:	08002f8b 	.word	0x08002f8b
 8003278:	08003b14 	.word	0x08003b14
 800327c:	08003af4 	.word	0x08003af4
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <__ssvfiscanf_r+0x2ec>)
 8003282:	2b00      	cmp	r3, #0
 8003284:	f43f aec5 	beq.w	8003012 <__ssvfiscanf_r+0x4e>
 8003288:	466b      	mov	r3, sp
 800328a:	4622      	mov	r2, r4
 800328c:	a941      	add	r1, sp, #260	; 0x104
 800328e:	4630      	mov	r0, r6
 8003290:	f3af 8000 	nop.w
 8003294:	e798      	b.n	80031c8 <__ssvfiscanf_r+0x204>
 8003296:	89a3      	ldrh	r3, [r4, #12]
 8003298:	f013 0f40 	tst.w	r3, #64	; 0x40
 800329c:	bf18      	it	ne
 800329e:	f04f 30ff 	movne.w	r0, #4294967295
 80032a2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80032a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032aa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80032ac:	e7f9      	b.n	80032a2 <__ssvfiscanf_r+0x2de>
 80032ae:	bf00      	nop
 80032b0:	00000000 	.word	0x00000000

080032b4 <_scanf_chars>:
 80032b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032b8:	4615      	mov	r5, r2
 80032ba:	688a      	ldr	r2, [r1, #8]
 80032bc:	4680      	mov	r8, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	b932      	cbnz	r2, 80032d0 <_scanf_chars+0x1c>
 80032c2:	698a      	ldr	r2, [r1, #24]
 80032c4:	2a00      	cmp	r2, #0
 80032c6:	bf0c      	ite	eq
 80032c8:	2201      	moveq	r2, #1
 80032ca:	f04f 32ff 	movne.w	r2, #4294967295
 80032ce:	608a      	str	r2, [r1, #8]
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003364 <_scanf_chars+0xb0>
 80032d6:	06d1      	lsls	r1, r2, #27
 80032d8:	bf5f      	itttt	pl
 80032da:	681a      	ldrpl	r2, [r3, #0]
 80032dc:	1d11      	addpl	r1, r2, #4
 80032de:	6019      	strpl	r1, [r3, #0]
 80032e0:	6816      	ldrpl	r6, [r2, #0]
 80032e2:	2700      	movs	r7, #0
 80032e4:	69a0      	ldr	r0, [r4, #24]
 80032e6:	b188      	cbz	r0, 800330c <_scanf_chars+0x58>
 80032e8:	2801      	cmp	r0, #1
 80032ea:	d107      	bne.n	80032fc <_scanf_chars+0x48>
 80032ec:	682a      	ldr	r2, [r5, #0]
 80032ee:	7811      	ldrb	r1, [r2, #0]
 80032f0:	6962      	ldr	r2, [r4, #20]
 80032f2:	5c52      	ldrb	r2, [r2, r1]
 80032f4:	b952      	cbnz	r2, 800330c <_scanf_chars+0x58>
 80032f6:	2f00      	cmp	r7, #0
 80032f8:	d031      	beq.n	800335e <_scanf_chars+0xaa>
 80032fa:	e022      	b.n	8003342 <_scanf_chars+0x8e>
 80032fc:	2802      	cmp	r0, #2
 80032fe:	d120      	bne.n	8003342 <_scanf_chars+0x8e>
 8003300:	682b      	ldr	r3, [r5, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003308:	071b      	lsls	r3, r3, #28
 800330a:	d41a      	bmi.n	8003342 <_scanf_chars+0x8e>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	06da      	lsls	r2, r3, #27
 8003310:	bf5e      	ittt	pl
 8003312:	682b      	ldrpl	r3, [r5, #0]
 8003314:	781b      	ldrbpl	r3, [r3, #0]
 8003316:	f806 3b01 	strbpl.w	r3, [r6], #1
 800331a:	682a      	ldr	r2, [r5, #0]
 800331c:	686b      	ldr	r3, [r5, #4]
 800331e:	3201      	adds	r2, #1
 8003320:	602a      	str	r2, [r5, #0]
 8003322:	68a2      	ldr	r2, [r4, #8]
 8003324:	3b01      	subs	r3, #1
 8003326:	3a01      	subs	r2, #1
 8003328:	606b      	str	r3, [r5, #4]
 800332a:	3701      	adds	r7, #1
 800332c:	60a2      	str	r2, [r4, #8]
 800332e:	b142      	cbz	r2, 8003342 <_scanf_chars+0x8e>
 8003330:	2b00      	cmp	r3, #0
 8003332:	dcd7      	bgt.n	80032e4 <_scanf_chars+0x30>
 8003334:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003338:	4629      	mov	r1, r5
 800333a:	4640      	mov	r0, r8
 800333c:	4798      	blx	r3
 800333e:	2800      	cmp	r0, #0
 8003340:	d0d0      	beq.n	80032e4 <_scanf_chars+0x30>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	f013 0310 	ands.w	r3, r3, #16
 8003348:	d105      	bne.n	8003356 <_scanf_chars+0xa2>
 800334a:	68e2      	ldr	r2, [r4, #12]
 800334c:	3201      	adds	r2, #1
 800334e:	60e2      	str	r2, [r4, #12]
 8003350:	69a2      	ldr	r2, [r4, #24]
 8003352:	b102      	cbz	r2, 8003356 <_scanf_chars+0xa2>
 8003354:	7033      	strb	r3, [r6, #0]
 8003356:	6923      	ldr	r3, [r4, #16]
 8003358:	443b      	add	r3, r7
 800335a:	6123      	str	r3, [r4, #16]
 800335c:	2000      	movs	r0, #0
 800335e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003362:	bf00      	nop
 8003364:	08003b14 	.word	0x08003b14

08003368 <_scanf_i>:
 8003368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336c:	4698      	mov	r8, r3
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <_scanf_i+0x1e0>)
 8003370:	460c      	mov	r4, r1
 8003372:	4682      	mov	sl, r0
 8003374:	4616      	mov	r6, r2
 8003376:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800337a:	b087      	sub	sp, #28
 800337c:	ab03      	add	r3, sp, #12
 800337e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003382:	4b72      	ldr	r3, [pc, #456]	; (800354c <_scanf_i+0x1e4>)
 8003384:	69a1      	ldr	r1, [r4, #24]
 8003386:	4a72      	ldr	r2, [pc, #456]	; (8003550 <_scanf_i+0x1e8>)
 8003388:	2903      	cmp	r1, #3
 800338a:	bf18      	it	ne
 800338c:	461a      	movne	r2, r3
 800338e:	68a3      	ldr	r3, [r4, #8]
 8003390:	9201      	str	r2, [sp, #4]
 8003392:	1e5a      	subs	r2, r3, #1
 8003394:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003398:	bf88      	it	hi
 800339a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800339e:	4627      	mov	r7, r4
 80033a0:	bf82      	ittt	hi
 80033a2:	eb03 0905 	addhi.w	r9, r3, r5
 80033a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80033aa:	60a3      	strhi	r3, [r4, #8]
 80033ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80033b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80033b4:	bf98      	it	ls
 80033b6:	f04f 0900 	movls.w	r9, #0
 80033ba:	6023      	str	r3, [r4, #0]
 80033bc:	463d      	mov	r5, r7
 80033be:	f04f 0b00 	mov.w	fp, #0
 80033c2:	6831      	ldr	r1, [r6, #0]
 80033c4:	ab03      	add	r3, sp, #12
 80033c6:	7809      	ldrb	r1, [r1, #0]
 80033c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80033cc:	2202      	movs	r2, #2
 80033ce:	f7fc ff07 	bl	80001e0 <memchr>
 80033d2:	b328      	cbz	r0, 8003420 <_scanf_i+0xb8>
 80033d4:	f1bb 0f01 	cmp.w	fp, #1
 80033d8:	d159      	bne.n	800348e <_scanf_i+0x126>
 80033da:	6862      	ldr	r2, [r4, #4]
 80033dc:	b92a      	cbnz	r2, 80033ea <_scanf_i+0x82>
 80033de:	6822      	ldr	r2, [r4, #0]
 80033e0:	2308      	movs	r3, #8
 80033e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e6:	6063      	str	r3, [r4, #4]
 80033e8:	6022      	str	r2, [r4, #0]
 80033ea:	6822      	ldr	r2, [r4, #0]
 80033ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80033f0:	6022      	str	r2, [r4, #0]
 80033f2:	68a2      	ldr	r2, [r4, #8]
 80033f4:	1e51      	subs	r1, r2, #1
 80033f6:	60a1      	str	r1, [r4, #8]
 80033f8:	b192      	cbz	r2, 8003420 <_scanf_i+0xb8>
 80033fa:	6832      	ldr	r2, [r6, #0]
 80033fc:	1c51      	adds	r1, r2, #1
 80033fe:	6031      	str	r1, [r6, #0]
 8003400:	7812      	ldrb	r2, [r2, #0]
 8003402:	f805 2b01 	strb.w	r2, [r5], #1
 8003406:	6872      	ldr	r2, [r6, #4]
 8003408:	3a01      	subs	r2, #1
 800340a:	2a00      	cmp	r2, #0
 800340c:	6072      	str	r2, [r6, #4]
 800340e:	dc07      	bgt.n	8003420 <_scanf_i+0xb8>
 8003410:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003414:	4631      	mov	r1, r6
 8003416:	4650      	mov	r0, sl
 8003418:	4790      	blx	r2
 800341a:	2800      	cmp	r0, #0
 800341c:	f040 8085 	bne.w	800352a <_scanf_i+0x1c2>
 8003420:	f10b 0b01 	add.w	fp, fp, #1
 8003424:	f1bb 0f03 	cmp.w	fp, #3
 8003428:	d1cb      	bne.n	80033c2 <_scanf_i+0x5a>
 800342a:	6863      	ldr	r3, [r4, #4]
 800342c:	b90b      	cbnz	r3, 8003432 <_scanf_i+0xca>
 800342e:	230a      	movs	r3, #10
 8003430:	6063      	str	r3, [r4, #4]
 8003432:	6863      	ldr	r3, [r4, #4]
 8003434:	4947      	ldr	r1, [pc, #284]	; (8003554 <_scanf_i+0x1ec>)
 8003436:	6960      	ldr	r0, [r4, #20]
 8003438:	1ac9      	subs	r1, r1, r3
 800343a:	f000 f88d 	bl	8003558 <__sccl>
 800343e:	f04f 0b00 	mov.w	fp, #0
 8003442:	68a3      	ldr	r3, [r4, #8]
 8003444:	6822      	ldr	r2, [r4, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d03d      	beq.n	80034c6 <_scanf_i+0x15e>
 800344a:	6831      	ldr	r1, [r6, #0]
 800344c:	6960      	ldr	r0, [r4, #20]
 800344e:	f891 c000 	ldrb.w	ip, [r1]
 8003452:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003456:	2800      	cmp	r0, #0
 8003458:	d035      	beq.n	80034c6 <_scanf_i+0x15e>
 800345a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800345e:	d124      	bne.n	80034aa <_scanf_i+0x142>
 8003460:	0510      	lsls	r0, r2, #20
 8003462:	d522      	bpl.n	80034aa <_scanf_i+0x142>
 8003464:	f10b 0b01 	add.w	fp, fp, #1
 8003468:	f1b9 0f00 	cmp.w	r9, #0
 800346c:	d003      	beq.n	8003476 <_scanf_i+0x10e>
 800346e:	3301      	adds	r3, #1
 8003470:	f109 39ff 	add.w	r9, r9, #4294967295
 8003474:	60a3      	str	r3, [r4, #8]
 8003476:	6873      	ldr	r3, [r6, #4]
 8003478:	3b01      	subs	r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	6073      	str	r3, [r6, #4]
 800347e:	dd1b      	ble.n	80034b8 <_scanf_i+0x150>
 8003480:	6833      	ldr	r3, [r6, #0]
 8003482:	3301      	adds	r3, #1
 8003484:	6033      	str	r3, [r6, #0]
 8003486:	68a3      	ldr	r3, [r4, #8]
 8003488:	3b01      	subs	r3, #1
 800348a:	60a3      	str	r3, [r4, #8]
 800348c:	e7d9      	b.n	8003442 <_scanf_i+0xda>
 800348e:	f1bb 0f02 	cmp.w	fp, #2
 8003492:	d1ae      	bne.n	80033f2 <_scanf_i+0x8a>
 8003494:	6822      	ldr	r2, [r4, #0]
 8003496:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800349a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800349e:	d1bf      	bne.n	8003420 <_scanf_i+0xb8>
 80034a0:	2310      	movs	r3, #16
 80034a2:	6063      	str	r3, [r4, #4]
 80034a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a8:	e7a2      	b.n	80033f0 <_scanf_i+0x88>
 80034aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80034ae:	6022      	str	r2, [r4, #0]
 80034b0:	780b      	ldrb	r3, [r1, #0]
 80034b2:	f805 3b01 	strb.w	r3, [r5], #1
 80034b6:	e7de      	b.n	8003476 <_scanf_i+0x10e>
 80034b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80034bc:	4631      	mov	r1, r6
 80034be:	4650      	mov	r0, sl
 80034c0:	4798      	blx	r3
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d0df      	beq.n	8003486 <_scanf_i+0x11e>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	05db      	lsls	r3, r3, #23
 80034ca:	d50d      	bpl.n	80034e8 <_scanf_i+0x180>
 80034cc:	42bd      	cmp	r5, r7
 80034ce:	d909      	bls.n	80034e4 <_scanf_i+0x17c>
 80034d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80034d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80034d8:	4632      	mov	r2, r6
 80034da:	4650      	mov	r0, sl
 80034dc:	4798      	blx	r3
 80034de:	f105 39ff 	add.w	r9, r5, #4294967295
 80034e2:	464d      	mov	r5, r9
 80034e4:	42bd      	cmp	r5, r7
 80034e6:	d02d      	beq.n	8003544 <_scanf_i+0x1dc>
 80034e8:	6822      	ldr	r2, [r4, #0]
 80034ea:	f012 0210 	ands.w	r2, r2, #16
 80034ee:	d113      	bne.n	8003518 <_scanf_i+0x1b0>
 80034f0:	702a      	strb	r2, [r5, #0]
 80034f2:	6863      	ldr	r3, [r4, #4]
 80034f4:	9e01      	ldr	r6, [sp, #4]
 80034f6:	4639      	mov	r1, r7
 80034f8:	4650      	mov	r0, sl
 80034fa:	47b0      	blx	r6
 80034fc:	6821      	ldr	r1, [r4, #0]
 80034fe:	f8d8 3000 	ldr.w	r3, [r8]
 8003502:	f011 0f20 	tst.w	r1, #32
 8003506:	d013      	beq.n	8003530 <_scanf_i+0x1c8>
 8003508:	1d1a      	adds	r2, r3, #4
 800350a:	f8c8 2000 	str.w	r2, [r8]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6018      	str	r0, [r3, #0]
 8003512:	68e3      	ldr	r3, [r4, #12]
 8003514:	3301      	adds	r3, #1
 8003516:	60e3      	str	r3, [r4, #12]
 8003518:	1bed      	subs	r5, r5, r7
 800351a:	44ab      	add	fp, r5
 800351c:	6925      	ldr	r5, [r4, #16]
 800351e:	445d      	add	r5, fp
 8003520:	6125      	str	r5, [r4, #16]
 8003522:	2000      	movs	r0, #0
 8003524:	b007      	add	sp, #28
 8003526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800352a:	f04f 0b00 	mov.w	fp, #0
 800352e:	e7ca      	b.n	80034c6 <_scanf_i+0x15e>
 8003530:	1d1a      	adds	r2, r3, #4
 8003532:	f8c8 2000 	str.w	r2, [r8]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f011 0f01 	tst.w	r1, #1
 800353c:	bf14      	ite	ne
 800353e:	8018      	strhne	r0, [r3, #0]
 8003540:	6018      	streq	r0, [r3, #0]
 8003542:	e7e6      	b.n	8003512 <_scanf_i+0x1aa>
 8003544:	2001      	movs	r0, #1
 8003546:	e7ed      	b.n	8003524 <_scanf_i+0x1bc>
 8003548:	08003ad0 	.word	0x08003ad0
 800354c:	080037b5 	.word	0x080037b5
 8003550:	080036cd 	.word	0x080036cd
 8003554:	08003b11 	.word	0x08003b11

08003558 <__sccl>:
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	780b      	ldrb	r3, [r1, #0]
 800355c:	4604      	mov	r4, r0
 800355e:	2b5e      	cmp	r3, #94	; 0x5e
 8003560:	bf0b      	itete	eq
 8003562:	784b      	ldrbeq	r3, [r1, #1]
 8003564:	1c48      	addne	r0, r1, #1
 8003566:	1c88      	addeq	r0, r1, #2
 8003568:	2200      	movne	r2, #0
 800356a:	bf08      	it	eq
 800356c:	2201      	moveq	r2, #1
 800356e:	1e61      	subs	r1, r4, #1
 8003570:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003574:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003578:	42a9      	cmp	r1, r5
 800357a:	d1fb      	bne.n	8003574 <__sccl+0x1c>
 800357c:	b90b      	cbnz	r3, 8003582 <__sccl+0x2a>
 800357e:	3801      	subs	r0, #1
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	f082 0201 	eor.w	r2, r2, #1
 8003586:	54e2      	strb	r2, [r4, r3]
 8003588:	4605      	mov	r5, r0
 800358a:	4628      	mov	r0, r5
 800358c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003590:	292d      	cmp	r1, #45	; 0x2d
 8003592:	d006      	beq.n	80035a2 <__sccl+0x4a>
 8003594:	295d      	cmp	r1, #93	; 0x5d
 8003596:	d0f3      	beq.n	8003580 <__sccl+0x28>
 8003598:	b909      	cbnz	r1, 800359e <__sccl+0x46>
 800359a:	4628      	mov	r0, r5
 800359c:	e7f0      	b.n	8003580 <__sccl+0x28>
 800359e:	460b      	mov	r3, r1
 80035a0:	e7f1      	b.n	8003586 <__sccl+0x2e>
 80035a2:	786e      	ldrb	r6, [r5, #1]
 80035a4:	2e5d      	cmp	r6, #93	; 0x5d
 80035a6:	d0fa      	beq.n	800359e <__sccl+0x46>
 80035a8:	42b3      	cmp	r3, r6
 80035aa:	dcf8      	bgt.n	800359e <__sccl+0x46>
 80035ac:	3502      	adds	r5, #2
 80035ae:	4619      	mov	r1, r3
 80035b0:	3101      	adds	r1, #1
 80035b2:	428e      	cmp	r6, r1
 80035b4:	5462      	strb	r2, [r4, r1]
 80035b6:	dcfb      	bgt.n	80035b0 <__sccl+0x58>
 80035b8:	1af1      	subs	r1, r6, r3
 80035ba:	3901      	subs	r1, #1
 80035bc:	1c58      	adds	r0, r3, #1
 80035be:	42b3      	cmp	r3, r6
 80035c0:	bfa8      	it	ge
 80035c2:	2100      	movge	r1, #0
 80035c4:	1843      	adds	r3, r0, r1
 80035c6:	e7e0      	b.n	800358a <__sccl+0x32>

080035c8 <_strtol_l.constprop.0>:
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ce:	d001      	beq.n	80035d4 <_strtol_l.constprop.0+0xc>
 80035d0:	2b24      	cmp	r3, #36	; 0x24
 80035d2:	d906      	bls.n	80035e2 <_strtol_l.constprop.0+0x1a>
 80035d4:	f7ff fc2e 	bl	8002e34 <__errno>
 80035d8:	2316      	movs	r3, #22
 80035da:	6003      	str	r3, [r0, #0]
 80035dc:	2000      	movs	r0, #0
 80035de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80036c8 <_strtol_l.constprop.0+0x100>
 80035e6:	460d      	mov	r5, r1
 80035e8:	462e      	mov	r6, r5
 80035ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80035f2:	f017 0708 	ands.w	r7, r7, #8
 80035f6:	d1f7      	bne.n	80035e8 <_strtol_l.constprop.0+0x20>
 80035f8:	2c2d      	cmp	r4, #45	; 0x2d
 80035fa:	d132      	bne.n	8003662 <_strtol_l.constprop.0+0x9a>
 80035fc:	782c      	ldrb	r4, [r5, #0]
 80035fe:	2701      	movs	r7, #1
 8003600:	1cb5      	adds	r5, r6, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d05b      	beq.n	80036be <_strtol_l.constprop.0+0xf6>
 8003606:	2b10      	cmp	r3, #16
 8003608:	d109      	bne.n	800361e <_strtol_l.constprop.0+0x56>
 800360a:	2c30      	cmp	r4, #48	; 0x30
 800360c:	d107      	bne.n	800361e <_strtol_l.constprop.0+0x56>
 800360e:	782c      	ldrb	r4, [r5, #0]
 8003610:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003614:	2c58      	cmp	r4, #88	; 0x58
 8003616:	d14d      	bne.n	80036b4 <_strtol_l.constprop.0+0xec>
 8003618:	786c      	ldrb	r4, [r5, #1]
 800361a:	2310      	movs	r3, #16
 800361c:	3502      	adds	r5, #2
 800361e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003622:	f108 38ff 	add.w	r8, r8, #4294967295
 8003626:	f04f 0c00 	mov.w	ip, #0
 800362a:	fbb8 f9f3 	udiv	r9, r8, r3
 800362e:	4666      	mov	r6, ip
 8003630:	fb03 8a19 	mls	sl, r3, r9, r8
 8003634:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003638:	f1be 0f09 	cmp.w	lr, #9
 800363c:	d816      	bhi.n	800366c <_strtol_l.constprop.0+0xa4>
 800363e:	4674      	mov	r4, lr
 8003640:	42a3      	cmp	r3, r4
 8003642:	dd24      	ble.n	800368e <_strtol_l.constprop.0+0xc6>
 8003644:	f1bc 0f00 	cmp.w	ip, #0
 8003648:	db1e      	blt.n	8003688 <_strtol_l.constprop.0+0xc0>
 800364a:	45b1      	cmp	r9, r6
 800364c:	d31c      	bcc.n	8003688 <_strtol_l.constprop.0+0xc0>
 800364e:	d101      	bne.n	8003654 <_strtol_l.constprop.0+0x8c>
 8003650:	45a2      	cmp	sl, r4
 8003652:	db19      	blt.n	8003688 <_strtol_l.constprop.0+0xc0>
 8003654:	fb06 4603 	mla	r6, r6, r3, r4
 8003658:	f04f 0c01 	mov.w	ip, #1
 800365c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003660:	e7e8      	b.n	8003634 <_strtol_l.constprop.0+0x6c>
 8003662:	2c2b      	cmp	r4, #43	; 0x2b
 8003664:	bf04      	itt	eq
 8003666:	782c      	ldrbeq	r4, [r5, #0]
 8003668:	1cb5      	addeq	r5, r6, #2
 800366a:	e7ca      	b.n	8003602 <_strtol_l.constprop.0+0x3a>
 800366c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003670:	f1be 0f19 	cmp.w	lr, #25
 8003674:	d801      	bhi.n	800367a <_strtol_l.constprop.0+0xb2>
 8003676:	3c37      	subs	r4, #55	; 0x37
 8003678:	e7e2      	b.n	8003640 <_strtol_l.constprop.0+0x78>
 800367a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800367e:	f1be 0f19 	cmp.w	lr, #25
 8003682:	d804      	bhi.n	800368e <_strtol_l.constprop.0+0xc6>
 8003684:	3c57      	subs	r4, #87	; 0x57
 8003686:	e7db      	b.n	8003640 <_strtol_l.constprop.0+0x78>
 8003688:	f04f 3cff 	mov.w	ip, #4294967295
 800368c:	e7e6      	b.n	800365c <_strtol_l.constprop.0+0x94>
 800368e:	f1bc 0f00 	cmp.w	ip, #0
 8003692:	da05      	bge.n	80036a0 <_strtol_l.constprop.0+0xd8>
 8003694:	2322      	movs	r3, #34	; 0x22
 8003696:	6003      	str	r3, [r0, #0]
 8003698:	4646      	mov	r6, r8
 800369a:	b942      	cbnz	r2, 80036ae <_strtol_l.constprop.0+0xe6>
 800369c:	4630      	mov	r0, r6
 800369e:	e79e      	b.n	80035de <_strtol_l.constprop.0+0x16>
 80036a0:	b107      	cbz	r7, 80036a4 <_strtol_l.constprop.0+0xdc>
 80036a2:	4276      	negs	r6, r6
 80036a4:	2a00      	cmp	r2, #0
 80036a6:	d0f9      	beq.n	800369c <_strtol_l.constprop.0+0xd4>
 80036a8:	f1bc 0f00 	cmp.w	ip, #0
 80036ac:	d000      	beq.n	80036b0 <_strtol_l.constprop.0+0xe8>
 80036ae:	1e69      	subs	r1, r5, #1
 80036b0:	6011      	str	r1, [r2, #0]
 80036b2:	e7f3      	b.n	800369c <_strtol_l.constprop.0+0xd4>
 80036b4:	2430      	movs	r4, #48	; 0x30
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1b1      	bne.n	800361e <_strtol_l.constprop.0+0x56>
 80036ba:	2308      	movs	r3, #8
 80036bc:	e7af      	b.n	800361e <_strtol_l.constprop.0+0x56>
 80036be:	2c30      	cmp	r4, #48	; 0x30
 80036c0:	d0a5      	beq.n	800360e <_strtol_l.constprop.0+0x46>
 80036c2:	230a      	movs	r3, #10
 80036c4:	e7ab      	b.n	800361e <_strtol_l.constprop.0+0x56>
 80036c6:	bf00      	nop
 80036c8:	08003b14 	.word	0x08003b14

080036cc <_strtol_r>:
 80036cc:	f7ff bf7c 	b.w	80035c8 <_strtol_l.constprop.0>

080036d0 <_strtoul_l.constprop.0>:
 80036d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036d4:	4f36      	ldr	r7, [pc, #216]	; (80037b0 <_strtoul_l.constprop.0+0xe0>)
 80036d6:	4686      	mov	lr, r0
 80036d8:	460d      	mov	r5, r1
 80036da:	4628      	mov	r0, r5
 80036dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036e0:	5de6      	ldrb	r6, [r4, r7]
 80036e2:	f016 0608 	ands.w	r6, r6, #8
 80036e6:	d1f8      	bne.n	80036da <_strtoul_l.constprop.0+0xa>
 80036e8:	2c2d      	cmp	r4, #45	; 0x2d
 80036ea:	d12f      	bne.n	800374c <_strtoul_l.constprop.0+0x7c>
 80036ec:	782c      	ldrb	r4, [r5, #0]
 80036ee:	2601      	movs	r6, #1
 80036f0:	1c85      	adds	r5, r0, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d057      	beq.n	80037a6 <_strtoul_l.constprop.0+0xd6>
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d109      	bne.n	800370e <_strtoul_l.constprop.0+0x3e>
 80036fa:	2c30      	cmp	r4, #48	; 0x30
 80036fc:	d107      	bne.n	800370e <_strtoul_l.constprop.0+0x3e>
 80036fe:	7828      	ldrb	r0, [r5, #0]
 8003700:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003704:	2858      	cmp	r0, #88	; 0x58
 8003706:	d149      	bne.n	800379c <_strtoul_l.constprop.0+0xcc>
 8003708:	786c      	ldrb	r4, [r5, #1]
 800370a:	2310      	movs	r3, #16
 800370c:	3502      	adds	r5, #2
 800370e:	f04f 38ff 	mov.w	r8, #4294967295
 8003712:	2700      	movs	r7, #0
 8003714:	fbb8 f8f3 	udiv	r8, r8, r3
 8003718:	fb03 f908 	mul.w	r9, r3, r8
 800371c:	ea6f 0909 	mvn.w	r9, r9
 8003720:	4638      	mov	r0, r7
 8003722:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003726:	f1bc 0f09 	cmp.w	ip, #9
 800372a:	d814      	bhi.n	8003756 <_strtoul_l.constprop.0+0x86>
 800372c:	4664      	mov	r4, ip
 800372e:	42a3      	cmp	r3, r4
 8003730:	dd22      	ble.n	8003778 <_strtoul_l.constprop.0+0xa8>
 8003732:	2f00      	cmp	r7, #0
 8003734:	db1d      	blt.n	8003772 <_strtoul_l.constprop.0+0xa2>
 8003736:	4580      	cmp	r8, r0
 8003738:	d31b      	bcc.n	8003772 <_strtoul_l.constprop.0+0xa2>
 800373a:	d101      	bne.n	8003740 <_strtoul_l.constprop.0+0x70>
 800373c:	45a1      	cmp	r9, r4
 800373e:	db18      	blt.n	8003772 <_strtoul_l.constprop.0+0xa2>
 8003740:	fb00 4003 	mla	r0, r0, r3, r4
 8003744:	2701      	movs	r7, #1
 8003746:	f815 4b01 	ldrb.w	r4, [r5], #1
 800374a:	e7ea      	b.n	8003722 <_strtoul_l.constprop.0+0x52>
 800374c:	2c2b      	cmp	r4, #43	; 0x2b
 800374e:	bf04      	itt	eq
 8003750:	782c      	ldrbeq	r4, [r5, #0]
 8003752:	1c85      	addeq	r5, r0, #2
 8003754:	e7cd      	b.n	80036f2 <_strtoul_l.constprop.0+0x22>
 8003756:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800375a:	f1bc 0f19 	cmp.w	ip, #25
 800375e:	d801      	bhi.n	8003764 <_strtoul_l.constprop.0+0x94>
 8003760:	3c37      	subs	r4, #55	; 0x37
 8003762:	e7e4      	b.n	800372e <_strtoul_l.constprop.0+0x5e>
 8003764:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003768:	f1bc 0f19 	cmp.w	ip, #25
 800376c:	d804      	bhi.n	8003778 <_strtoul_l.constprop.0+0xa8>
 800376e:	3c57      	subs	r4, #87	; 0x57
 8003770:	e7dd      	b.n	800372e <_strtoul_l.constprop.0+0x5e>
 8003772:	f04f 37ff 	mov.w	r7, #4294967295
 8003776:	e7e6      	b.n	8003746 <_strtoul_l.constprop.0+0x76>
 8003778:	2f00      	cmp	r7, #0
 800377a:	da07      	bge.n	800378c <_strtoul_l.constprop.0+0xbc>
 800377c:	2322      	movs	r3, #34	; 0x22
 800377e:	f8ce 3000 	str.w	r3, [lr]
 8003782:	f04f 30ff 	mov.w	r0, #4294967295
 8003786:	b932      	cbnz	r2, 8003796 <_strtoul_l.constprop.0+0xc6>
 8003788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800378c:	b106      	cbz	r6, 8003790 <_strtoul_l.constprop.0+0xc0>
 800378e:	4240      	negs	r0, r0
 8003790:	2a00      	cmp	r2, #0
 8003792:	d0f9      	beq.n	8003788 <_strtoul_l.constprop.0+0xb8>
 8003794:	b107      	cbz	r7, 8003798 <_strtoul_l.constprop.0+0xc8>
 8003796:	1e69      	subs	r1, r5, #1
 8003798:	6011      	str	r1, [r2, #0]
 800379a:	e7f5      	b.n	8003788 <_strtoul_l.constprop.0+0xb8>
 800379c:	2430      	movs	r4, #48	; 0x30
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1b5      	bne.n	800370e <_strtoul_l.constprop.0+0x3e>
 80037a2:	2308      	movs	r3, #8
 80037a4:	e7b3      	b.n	800370e <_strtoul_l.constprop.0+0x3e>
 80037a6:	2c30      	cmp	r4, #48	; 0x30
 80037a8:	d0a9      	beq.n	80036fe <_strtoul_l.constprop.0+0x2e>
 80037aa:	230a      	movs	r3, #10
 80037ac:	e7af      	b.n	800370e <_strtoul_l.constprop.0+0x3e>
 80037ae:	bf00      	nop
 80037b0:	08003b14 	.word	0x08003b14

080037b4 <_strtoul_r>:
 80037b4:	f7ff bf8c 	b.w	80036d0 <_strtoul_l.constprop.0>

080037b8 <__submore>:
 80037b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037bc:	460c      	mov	r4, r1
 80037be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80037c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037c4:	4299      	cmp	r1, r3
 80037c6:	d11d      	bne.n	8003804 <__submore+0x4c>
 80037c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037cc:	f000 f89c 	bl	8003908 <_malloc_r>
 80037d0:	b918      	cbnz	r0, 80037da <__submore+0x22>
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295
 80037d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037de:	63a3      	str	r3, [r4, #56]	; 0x38
 80037e0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80037e4:	6360      	str	r0, [r4, #52]	; 0x34
 80037e6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80037ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80037ee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80037f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80037f6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80037fa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80037fe:	6020      	str	r0, [r4, #0]
 8003800:	2000      	movs	r0, #0
 8003802:	e7e8      	b.n	80037d6 <__submore+0x1e>
 8003804:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003806:	0077      	lsls	r7, r6, #1
 8003808:	463a      	mov	r2, r7
 800380a:	f000 f8f1 	bl	80039f0 <_realloc_r>
 800380e:	4605      	mov	r5, r0
 8003810:	2800      	cmp	r0, #0
 8003812:	d0de      	beq.n	80037d2 <__submore+0x1a>
 8003814:	eb00 0806 	add.w	r8, r0, r6
 8003818:	4601      	mov	r1, r0
 800381a:	4632      	mov	r2, r6
 800381c:	4640      	mov	r0, r8
 800381e:	f7ff fb33 	bl	8002e88 <memcpy>
 8003822:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003826:	f8c4 8000 	str.w	r8, [r4]
 800382a:	e7e9      	b.n	8003800 <__submore+0x48>

0800382c <__retarget_lock_acquire_recursive>:
 800382c:	4770      	bx	lr

0800382e <__retarget_lock_release_recursive>:
 800382e:	4770      	bx	lr

08003830 <_free_r>:
 8003830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003832:	2900      	cmp	r1, #0
 8003834:	d044      	beq.n	80038c0 <_free_r+0x90>
 8003836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800383a:	9001      	str	r0, [sp, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f1a1 0404 	sub.w	r4, r1, #4
 8003842:	bfb8      	it	lt
 8003844:	18e4      	addlt	r4, r4, r3
 8003846:	f000 f913 	bl	8003a70 <__malloc_lock>
 800384a:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <_free_r+0x94>)
 800384c:	9801      	ldr	r0, [sp, #4]
 800384e:	6813      	ldr	r3, [r2, #0]
 8003850:	b933      	cbnz	r3, 8003860 <_free_r+0x30>
 8003852:	6063      	str	r3, [r4, #4]
 8003854:	6014      	str	r4, [r2, #0]
 8003856:	b003      	add	sp, #12
 8003858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800385c:	f000 b90e 	b.w	8003a7c <__malloc_unlock>
 8003860:	42a3      	cmp	r3, r4
 8003862:	d908      	bls.n	8003876 <_free_r+0x46>
 8003864:	6825      	ldr	r5, [r4, #0]
 8003866:	1961      	adds	r1, r4, r5
 8003868:	428b      	cmp	r3, r1
 800386a:	bf01      	itttt	eq
 800386c:	6819      	ldreq	r1, [r3, #0]
 800386e:	685b      	ldreq	r3, [r3, #4]
 8003870:	1949      	addeq	r1, r1, r5
 8003872:	6021      	streq	r1, [r4, #0]
 8003874:	e7ed      	b.n	8003852 <_free_r+0x22>
 8003876:	461a      	mov	r2, r3
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	b10b      	cbz	r3, 8003880 <_free_r+0x50>
 800387c:	42a3      	cmp	r3, r4
 800387e:	d9fa      	bls.n	8003876 <_free_r+0x46>
 8003880:	6811      	ldr	r1, [r2, #0]
 8003882:	1855      	adds	r5, r2, r1
 8003884:	42a5      	cmp	r5, r4
 8003886:	d10b      	bne.n	80038a0 <_free_r+0x70>
 8003888:	6824      	ldr	r4, [r4, #0]
 800388a:	4421      	add	r1, r4
 800388c:	1854      	adds	r4, r2, r1
 800388e:	42a3      	cmp	r3, r4
 8003890:	6011      	str	r1, [r2, #0]
 8003892:	d1e0      	bne.n	8003856 <_free_r+0x26>
 8003894:	681c      	ldr	r4, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	6053      	str	r3, [r2, #4]
 800389a:	4421      	add	r1, r4
 800389c:	6011      	str	r1, [r2, #0]
 800389e:	e7da      	b.n	8003856 <_free_r+0x26>
 80038a0:	d902      	bls.n	80038a8 <_free_r+0x78>
 80038a2:	230c      	movs	r3, #12
 80038a4:	6003      	str	r3, [r0, #0]
 80038a6:	e7d6      	b.n	8003856 <_free_r+0x26>
 80038a8:	6825      	ldr	r5, [r4, #0]
 80038aa:	1961      	adds	r1, r4, r5
 80038ac:	428b      	cmp	r3, r1
 80038ae:	bf04      	itt	eq
 80038b0:	6819      	ldreq	r1, [r3, #0]
 80038b2:	685b      	ldreq	r3, [r3, #4]
 80038b4:	6063      	str	r3, [r4, #4]
 80038b6:	bf04      	itt	eq
 80038b8:	1949      	addeq	r1, r1, r5
 80038ba:	6021      	streq	r1, [r4, #0]
 80038bc:	6054      	str	r4, [r2, #4]
 80038be:	e7ca      	b.n	8003856 <_free_r+0x26>
 80038c0:	b003      	add	sp, #12
 80038c2:	bd30      	pop	{r4, r5, pc}
 80038c4:	200002f4 	.word	0x200002f4

080038c8 <sbrk_aligned>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	4e0e      	ldr	r6, [pc, #56]	; (8003904 <sbrk_aligned+0x3c>)
 80038cc:	460c      	mov	r4, r1
 80038ce:	6831      	ldr	r1, [r6, #0]
 80038d0:	4605      	mov	r5, r0
 80038d2:	b911      	cbnz	r1, 80038da <sbrk_aligned+0x12>
 80038d4:	f000 f8bc 	bl	8003a50 <_sbrk_r>
 80038d8:	6030      	str	r0, [r6, #0]
 80038da:	4621      	mov	r1, r4
 80038dc:	4628      	mov	r0, r5
 80038de:	f000 f8b7 	bl	8003a50 <_sbrk_r>
 80038e2:	1c43      	adds	r3, r0, #1
 80038e4:	d00a      	beq.n	80038fc <sbrk_aligned+0x34>
 80038e6:	1cc4      	adds	r4, r0, #3
 80038e8:	f024 0403 	bic.w	r4, r4, #3
 80038ec:	42a0      	cmp	r0, r4
 80038ee:	d007      	beq.n	8003900 <sbrk_aligned+0x38>
 80038f0:	1a21      	subs	r1, r4, r0
 80038f2:	4628      	mov	r0, r5
 80038f4:	f000 f8ac 	bl	8003a50 <_sbrk_r>
 80038f8:	3001      	adds	r0, #1
 80038fa:	d101      	bne.n	8003900 <sbrk_aligned+0x38>
 80038fc:	f04f 34ff 	mov.w	r4, #4294967295
 8003900:	4620      	mov	r0, r4
 8003902:	bd70      	pop	{r4, r5, r6, pc}
 8003904:	200002f8 	.word	0x200002f8

08003908 <_malloc_r>:
 8003908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390c:	1ccd      	adds	r5, r1, #3
 800390e:	f025 0503 	bic.w	r5, r5, #3
 8003912:	3508      	adds	r5, #8
 8003914:	2d0c      	cmp	r5, #12
 8003916:	bf38      	it	cc
 8003918:	250c      	movcc	r5, #12
 800391a:	2d00      	cmp	r5, #0
 800391c:	4607      	mov	r7, r0
 800391e:	db01      	blt.n	8003924 <_malloc_r+0x1c>
 8003920:	42a9      	cmp	r1, r5
 8003922:	d905      	bls.n	8003930 <_malloc_r+0x28>
 8003924:	230c      	movs	r3, #12
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	2600      	movs	r6, #0
 800392a:	4630      	mov	r0, r6
 800392c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003930:	4e2e      	ldr	r6, [pc, #184]	; (80039ec <_malloc_r+0xe4>)
 8003932:	f000 f89d 	bl	8003a70 <__malloc_lock>
 8003936:	6833      	ldr	r3, [r6, #0]
 8003938:	461c      	mov	r4, r3
 800393a:	bb34      	cbnz	r4, 800398a <_malloc_r+0x82>
 800393c:	4629      	mov	r1, r5
 800393e:	4638      	mov	r0, r7
 8003940:	f7ff ffc2 	bl	80038c8 <sbrk_aligned>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	4604      	mov	r4, r0
 8003948:	d14d      	bne.n	80039e6 <_malloc_r+0xde>
 800394a:	6834      	ldr	r4, [r6, #0]
 800394c:	4626      	mov	r6, r4
 800394e:	2e00      	cmp	r6, #0
 8003950:	d140      	bne.n	80039d4 <_malloc_r+0xcc>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	4631      	mov	r1, r6
 8003956:	4638      	mov	r0, r7
 8003958:	eb04 0803 	add.w	r8, r4, r3
 800395c:	f000 f878 	bl	8003a50 <_sbrk_r>
 8003960:	4580      	cmp	r8, r0
 8003962:	d13a      	bne.n	80039da <_malloc_r+0xd2>
 8003964:	6821      	ldr	r1, [r4, #0]
 8003966:	3503      	adds	r5, #3
 8003968:	1a6d      	subs	r5, r5, r1
 800396a:	f025 0503 	bic.w	r5, r5, #3
 800396e:	3508      	adds	r5, #8
 8003970:	2d0c      	cmp	r5, #12
 8003972:	bf38      	it	cc
 8003974:	250c      	movcc	r5, #12
 8003976:	4629      	mov	r1, r5
 8003978:	4638      	mov	r0, r7
 800397a:	f7ff ffa5 	bl	80038c8 <sbrk_aligned>
 800397e:	3001      	adds	r0, #1
 8003980:	d02b      	beq.n	80039da <_malloc_r+0xd2>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	442b      	add	r3, r5
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	e00e      	b.n	80039a8 <_malloc_r+0xa0>
 800398a:	6822      	ldr	r2, [r4, #0]
 800398c:	1b52      	subs	r2, r2, r5
 800398e:	d41e      	bmi.n	80039ce <_malloc_r+0xc6>
 8003990:	2a0b      	cmp	r2, #11
 8003992:	d916      	bls.n	80039c2 <_malloc_r+0xba>
 8003994:	1961      	adds	r1, r4, r5
 8003996:	42a3      	cmp	r3, r4
 8003998:	6025      	str	r5, [r4, #0]
 800399a:	bf18      	it	ne
 800399c:	6059      	strne	r1, [r3, #4]
 800399e:	6863      	ldr	r3, [r4, #4]
 80039a0:	bf08      	it	eq
 80039a2:	6031      	streq	r1, [r6, #0]
 80039a4:	5162      	str	r2, [r4, r5]
 80039a6:	604b      	str	r3, [r1, #4]
 80039a8:	4638      	mov	r0, r7
 80039aa:	f104 060b 	add.w	r6, r4, #11
 80039ae:	f000 f865 	bl	8003a7c <__malloc_unlock>
 80039b2:	f026 0607 	bic.w	r6, r6, #7
 80039b6:	1d23      	adds	r3, r4, #4
 80039b8:	1af2      	subs	r2, r6, r3
 80039ba:	d0b6      	beq.n	800392a <_malloc_r+0x22>
 80039bc:	1b9b      	subs	r3, r3, r6
 80039be:	50a3      	str	r3, [r4, r2]
 80039c0:	e7b3      	b.n	800392a <_malloc_r+0x22>
 80039c2:	6862      	ldr	r2, [r4, #4]
 80039c4:	42a3      	cmp	r3, r4
 80039c6:	bf0c      	ite	eq
 80039c8:	6032      	streq	r2, [r6, #0]
 80039ca:	605a      	strne	r2, [r3, #4]
 80039cc:	e7ec      	b.n	80039a8 <_malloc_r+0xa0>
 80039ce:	4623      	mov	r3, r4
 80039d0:	6864      	ldr	r4, [r4, #4]
 80039d2:	e7b2      	b.n	800393a <_malloc_r+0x32>
 80039d4:	4634      	mov	r4, r6
 80039d6:	6876      	ldr	r6, [r6, #4]
 80039d8:	e7b9      	b.n	800394e <_malloc_r+0x46>
 80039da:	230c      	movs	r3, #12
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	4638      	mov	r0, r7
 80039e0:	f000 f84c 	bl	8003a7c <__malloc_unlock>
 80039e4:	e7a1      	b.n	800392a <_malloc_r+0x22>
 80039e6:	6025      	str	r5, [r4, #0]
 80039e8:	e7de      	b.n	80039a8 <_malloc_r+0xa0>
 80039ea:	bf00      	nop
 80039ec:	200002f4 	.word	0x200002f4

080039f0 <_realloc_r>:
 80039f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f4:	4680      	mov	r8, r0
 80039f6:	4614      	mov	r4, r2
 80039f8:	460e      	mov	r6, r1
 80039fa:	b921      	cbnz	r1, 8003a06 <_realloc_r+0x16>
 80039fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a00:	4611      	mov	r1, r2
 8003a02:	f7ff bf81 	b.w	8003908 <_malloc_r>
 8003a06:	b92a      	cbnz	r2, 8003a14 <_realloc_r+0x24>
 8003a08:	f7ff ff12 	bl	8003830 <_free_r>
 8003a0c:	4625      	mov	r5, r4
 8003a0e:	4628      	mov	r0, r5
 8003a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a14:	f000 f838 	bl	8003a88 <_malloc_usable_size_r>
 8003a18:	4284      	cmp	r4, r0
 8003a1a:	4607      	mov	r7, r0
 8003a1c:	d802      	bhi.n	8003a24 <_realloc_r+0x34>
 8003a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a22:	d812      	bhi.n	8003a4a <_realloc_r+0x5a>
 8003a24:	4621      	mov	r1, r4
 8003a26:	4640      	mov	r0, r8
 8003a28:	f7ff ff6e 	bl	8003908 <_malloc_r>
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d0ed      	beq.n	8003a0e <_realloc_r+0x1e>
 8003a32:	42bc      	cmp	r4, r7
 8003a34:	4622      	mov	r2, r4
 8003a36:	4631      	mov	r1, r6
 8003a38:	bf28      	it	cs
 8003a3a:	463a      	movcs	r2, r7
 8003a3c:	f7ff fa24 	bl	8002e88 <memcpy>
 8003a40:	4631      	mov	r1, r6
 8003a42:	4640      	mov	r0, r8
 8003a44:	f7ff fef4 	bl	8003830 <_free_r>
 8003a48:	e7e1      	b.n	8003a0e <_realloc_r+0x1e>
 8003a4a:	4635      	mov	r5, r6
 8003a4c:	e7df      	b.n	8003a0e <_realloc_r+0x1e>
	...

08003a50 <_sbrk_r>:
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	4d06      	ldr	r5, [pc, #24]	; (8003a6c <_sbrk_r+0x1c>)
 8003a54:	2300      	movs	r3, #0
 8003a56:	4604      	mov	r4, r0
 8003a58:	4608      	mov	r0, r1
 8003a5a:	602b      	str	r3, [r5, #0]
 8003a5c:	f7fd f8c2 	bl	8000be4 <_sbrk>
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	d102      	bne.n	8003a6a <_sbrk_r+0x1a>
 8003a64:	682b      	ldr	r3, [r5, #0]
 8003a66:	b103      	cbz	r3, 8003a6a <_sbrk_r+0x1a>
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
 8003a6c:	200002ec 	.word	0x200002ec

08003a70 <__malloc_lock>:
 8003a70:	4801      	ldr	r0, [pc, #4]	; (8003a78 <__malloc_lock+0x8>)
 8003a72:	f7ff bedb 	b.w	800382c <__retarget_lock_acquire_recursive>
 8003a76:	bf00      	nop
 8003a78:	200002f0 	.word	0x200002f0

08003a7c <__malloc_unlock>:
 8003a7c:	4801      	ldr	r0, [pc, #4]	; (8003a84 <__malloc_unlock+0x8>)
 8003a7e:	f7ff bed6 	b.w	800382e <__retarget_lock_release_recursive>
 8003a82:	bf00      	nop
 8003a84:	200002f0 	.word	0x200002f0

08003a88 <_malloc_usable_size_r>:
 8003a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a8c:	1f18      	subs	r0, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bfbc      	itt	lt
 8003a92:	580b      	ldrlt	r3, [r1, r0]
 8003a94:	18c0      	addlt	r0, r0, r3
 8003a96:	4770      	bx	lr

08003a98 <_init>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr

08003aa4 <_fini>:
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	bf00      	nop
 8003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aaa:	bc08      	pop	{r3}
 8003aac:	469e      	mov	lr, r3
 8003aae:	4770      	bx	lr
